# DENTRO DE: tests/test_full_integration.py
import unittest
print("\n--- A iniciar o Teste de Fumo de Integra√ß√£o Completa do ControlLab ---")

class TestFullModuleIntegration(unittest.TestCase):

    def test_imports_sem_ciclos(self):
        """
        Este teste verifica se todos os principais m√≥dulos e classes do ControlLab
        podem ser importados sem causar um ciclo de importa√ß√£o ou bloqueio.
        N√£o testa a l√≥gica, apenas a capacidade de carregamento do ecossistema.
        """
        print("\n[FASE 1] A verificar a importa√ß√£o dos m√≥dulos de baixo n√≠vel...")

        try:
            # 1. O Alicerce: Classes de Dados e Utilit√°rios
            from controllab.utils import StabilityResult, ControllerResult, DesignSpecifications
            from controllab.core.history import OperationHistory
            print("  ‚úÖ SUCESSO: Utilit√°rios e Hist√≥rico importados.")

            # 2. O N√∫cleo: As nossas estruturas de dados principais
            from controllab.core.symbolic_tf import SymbolicTransferFunction
            from controllab.core.symbolic_ss import SymbolicStateSpace
            print("  ‚úÖ SUCESSO: N√∫cleo Simb√≥lico (core) importado.")

        except ImportError as e:
            self.fail(f"FALHA CR√çTICA: N√£o foi poss√≠vel importar os m√≥dulos de base. Erro: {e}")

        print("\n[FASE 2] A verificar a importa√ß√£o dos 'Motores de C√°lculo'...")

        try:
            # 3. Motores de An√°lise (devem ser independentes)
            from controllab.analysis.routh_hurwitz import RouthHurwitzAnalyzer
            from controllab.analysis.root_locus import RootLocusAnalyzer
            from controllab.analysis.frequency_response import FrequencyAnalyzer
            print("  ‚úÖ SUCESSO: Motores de An√°lise individuais importados.")

            # 4. Motores de Design (devem ser independentes)
            from controllab.design.compensators import PID, Lead, Lag
            from controllab.design.pole_placement import StateSpaceController
            print("  ‚úÖ SUCESSO: Motores de Design individuais importados.")

        except ImportError as e:
            self.fail(f"FALHA CR√çTICA: N√£o foi poss√≠vel importar os motores de c√°lculo. Erro: {e}")

        print("\n[FASE 3] A verificar a importa√ß√£o dos 'Tradutores' e 'Orquestradores' (onde os ciclos acontecem)...")

        try:
            # 5. A Camada de Formata√ß√£o (deve ser independente)
            from controllab.analysis.pedagogical_formatter import format_routh_hurwitz_response
            print("  ‚úÖ SUCESSO: Camada de Formata√ß√£o importada.")

            # 6. O Orquestrador Principal (o teste final)
            # Este √© o ficheiro que importa de m√∫ltiplos locais e √© o mais
            # suscet√≠vel a despoletar um ciclo.
            from controllab.analysis.stability_analysis import StabilityAnalysisEngine
            print("  ‚úÖ SUCESSO: O Orquestrador 'StabilityAnalysisEngine' foi importado.")

        except ImportError as e:
            self.fail(f"FALHA CR√çTICA: N√£o foi poss√≠vel importar as camadas de alto n√≠vel. Erro: {e}")

        print("\n--- Conclus√£o do Teste de Fumo ---")
        print("üéâ SUCESSO GERAL! Todos os m√≥dulos principais foram importados sem bloqueios ou ciclos de importa√ß√£o.")
        self.assertTrue(True, "A arquitetura de importa√ß√µes est√° saud√°vel.")

if __name__ == '__main__':
    unittest.main()
