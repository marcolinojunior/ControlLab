#!/usr/bin/env python3
"""
Teste Completo da Fase 2: N√∫cleo Simb√≥lico - ControlLab
Valida√ß√£o da implementa√ß√£o do n√∫cleo simb√≥lico
"""

import pytest
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

try:
    import sympy as sp
    from src.controllab.core import (
        SymbolicTransferFunction, 
        SymbolicStateSpace,
        OperationHistory,
        create_laplace_variable,
        create_z_variable,
        poly_from_roots,
        validate_proper_tf,
        cancel_common_factors,
        extract_poles_zeros,
        expand_partial_fractions,
        symbolic_stability_analysis
    )
    SYMPY_AVAILABLE = True
except ImportError as e:
    SYMPY_AVAILABLE = False
    IMPORT_ERROR = str(e)

class TestFase2NucleoSimbolico:
    """
    Teste completo da Fase 2: N√∫cleo Simb√≥lico
    
    Este teste valida todas as funcionalidades implementadas no n√∫cleo simb√≥lico,
    incluindo fun√ß√µes de transfer√™ncia, sistemas em espa√ßo de estados, hist√≥rico
    pedag√≥gico e utilit√°rios simb√≥licos.
    """
    
    def setup_method(self):
        """Setup para cada teste"""
        if not SYMPY_AVAILABLE:
            pytest.skip(f"SymPy n√£o dispon√≠vel: {IMPORT_ERROR}")
        
        self.s = create_laplace_variable()
        self.z = create_z_variable()
        self.K = sp.Symbol('K', positive=True)
        self.T = sp.Symbol('T', positive=True)
        self.zeta = sp.Symbol('zeta', positive=True)
        self.wn = sp.Symbol('wn', positive=True)
    
    def test_import_symbolic_engine(self):
        """üîß Import do SymbolicEngine - Teste de importa√ß√£o do m√≥dulo principal"""
        assert SYMPY_AVAILABLE, f"Falha na importa√ß√£o: {IMPORT_ERROR if not SYMPY_AVAILABLE else 'OK'}"
        
        # Verifica importa√ß√µes principais
        assert SymbolicTransferFunction is not None
        assert SymbolicStateSpace is not None
        assert OperationHistory is not None
        
        print("‚úÖ Importa√ß√£o do n√∫cleo simb√≥lico bem-sucedida")
    
    def test_criacao_funcao_transferencia(self):
        """üîß Cria√ß√£o de Fun√ß√£o de Transfer√™ncia - Teste de cria√ß√£o de TF simb√≥licas"""
        # Teste 1: Fun√ß√£o de transfer√™ncia simples
        G1 = SymbolicTransferFunction(1, self.s + 1)
        assert G1.numerator == 1
        assert G1.denominator == self.s + 1
        assert G1.variable == self.s
        
        # Teste 2: Fun√ß√£o de transfer√™ncia param√©trica
        G2 = SymbolicTransferFunction(self.K, self.T * self.s + 1)
        assert G2.numerator == self.K
        assert sp.simplify(G2.denominator - (self.T * self.s + 1)) == 0
        
        # Teste 3: Fun√ß√£o de segunda ordem
        den_2nd = self.s**2 + 2*self.zeta*self.wn*self.s + self.wn**2
        G3 = SymbolicTransferFunction(self.wn**2, den_2nd)
        assert G3.numerator == self.wn**2
        
        print("‚úÖ Cria√ß√£o de fun√ß√µes de transfer√™ncia simb√≥licas validada")
    
    def test_operacoes_simbolicas(self):
        """üîß Opera√ß√µes Simb√≥licas - Testes para soma, multiplica√ß√£o, simplifica√ß√£o"""
        # Cria√ß√£o de sistemas b√°sicos
        G1 = SymbolicTransferFunction(self.K, self.s + 1)
        G2 = SymbolicTransferFunction(1, self.s + 2)
        
        # Teste de multiplica√ß√£o (conex√£o s√©rie)
        G_series = G1 * G2
        expected_num = self.K
        expected_den = (self.s + 1) * (self.s + 2)
        assert sp.simplify(G_series.numerator - expected_num) == 0
        assert sp.simplify(G_series.denominator - expected_den) == 0
        
        # Teste de adi√ß√£o (conex√£o paralela)
        G_parallel = G1 + G2
        # G1 + G2 = K/(s+1) + 1/(s+2) = [K(s+2) + (s+1)] / [(s+1)(s+2)]
        assert isinstance(G_parallel.numerator, sp.Expr)
        assert isinstance(G_parallel.denominator, sp.Expr)
        
        # Teste de simplifica√ß√£o
        # Cria fun√ß√£o com fatores comuns
        num_common = (self.s + 1) * (self.s + 2)
        den_common = (self.s + 1) * (self.s + 3)
        G_common = SymbolicTransferFunction(num_common, den_common)
        G_simplified = G_common.simplify()
        
        # Deve simplificar para (s+2)/(s+3)
        assert sp.simplify(G_simplified.numerator - (self.s + 2)) == 0
        assert sp.simplify(G_simplified.denominator - (self.s + 3)) == 0
        
        print("‚úÖ Opera√ß√µes simb√≥licas (multiplica√ß√£o, adi√ß√£o, simplifica√ß√£o) validadas")
    
    def test_conversao_latex(self):
        """üîß Convers√£o LaTeX - Teste de gera√ß√£o de express√µes matem√°ticas"""
        G = SymbolicTransferFunction(self.K * self.wn**2, 
                                   self.s**2 + 2*self.zeta*self.wn*self.s + self.wn**2)
        
        latex_output = G.to_latex()
        
        # Verifica se √© string e cont√©m elementos esperados
        assert isinstance(latex_output, str)
        assert 'K' in latex_output or 'omega' in latex_output or 'zeta' in latex_output
        
        print("‚úÖ Convers√£o para LaTeX validada")
    
    def test_fracoes_parciais(self):
        """üîß Fra√ß√µes Parciais - Teste de decomposi√ß√£o em fra√ß√µes parciais"""
        # Fun√ß√£o que pode ser expandida em fra√ß√µes parciais
        # G(s) = 1/[(s+1)(s+2)]
        G = SymbolicTransferFunction(1, (self.s + 1) * (self.s + 2))
        
        partial_expansion = G.partial_fractions()
        
        # Verifica se retorna uma express√£o SymPy
        assert isinstance(partial_expansion, sp.Expr)
        
        # Teste com fun√ß√£o mais complexa
        G2 = SymbolicTransferFunction(self.s + 3, (self.s + 1) * (self.s + 2) * (self.s + 4))
        partial2 = G2.partial_fractions()
        assert isinstance(partial2, sp.Expr)
        
        print("‚úÖ Decomposi√ß√£o em fra√ß√µes parciais validada")
    
    def test_polos_zeros(self):
        """üîß Polos e Zeros - Teste de c√°lculo simb√≥lico de polos e zeros"""
        # G(s) = (s+1)/[(s+2)(s+3)] com zero em -1 e polos em -2, -3
        num = self.s + 1
        den = (self.s + 2) * (self.s + 3)
        G = SymbolicTransferFunction(num, den)
        
        zeros = G.zeros()
        poles = G.poles()
        
        # Verifica zeros e polos
        assert -1 in zeros, f"Zero -1 n√£o encontrado. Zeros encontrados: {zeros}"
        assert -2 in poles, f"Polo -2 n√£o encontrado. Polos encontrados: {poles}"
        assert -3 in poles, f"Polo -3 n√£o encontrado. Polos encontrados: {poles}"
        
        print("‚úÖ C√°lculo de polos e zeros validado")
    
    def test_respostas_simbolicas(self):
        """üîß Respostas Simb√≥licas - Testes de resposta ao degrau e frequ√™ncia"""
        # Sistema de primeira ordem
        G = SymbolicTransferFunction(1, self.s + 1)
        
        # Teste de avalia√ß√£o num√©rica (resposta em frequ√™ncia)
        # G(jœâ) em œâ=0
        response_dc = G.evaluate_at(0)
        assert abs(response_dc - 1.0) < 1e-10
        
        # G(jœâ) em œâ=‚àû (s‚Üí‚àû)
        response_high_freq = G.evaluate_at(1000)
        assert abs(response_high_freq) < 0.01  # Deve tender a zero
        
        # Teste com sistema param√©trico
        G_param = SymbolicTransferFunction(self.K, self.T * self.s + 1)
        G_numeric = G_param.substitute({self.K: 2, self.T: 0.5})
        
        response_param = G_numeric.evaluate_at(0)
        assert abs(response_param - 2.0) < 1e-10
        
        print("‚úÖ Avalia√ß√£o de respostas simb√≥licas validada")
    
    def test_lugar_raizes_simbolico(self):
        """üîß Lugar das Ra√≠zes - Teste de an√°lise simb√≥lica do lugar das ra√≠zes"""
        # Sistema b√°sico para an√°lise de lugar das ra√≠zes
        # G(s) = K/[s(s+1)(s+2)]
        G = SymbolicTransferFunction(self.K, self.s * (self.s + 1) * (self.s + 2))
        
        # Extrai denominador caracter√≠stico (1 + KG)
        # Para sistema em malha fechada
        char_poly = G.denominator + self.K * G.numerator
        
        # An√°lise de estabilidade simb√≥lica
        stability_analysis = symbolic_stability_analysis(char_poly, self.s)
        
        assert isinstance(stability_analysis, dict)
        assert 'coefficients' in stability_analysis
        assert 'polynomial' in stability_analysis
        
        print("‚úÖ An√°lise simb√≥lica para lugar das ra√≠zes validada")
    
    def test_substituicao_parametros(self):
        """üîß Substitui√ß√£o de Par√¢metros - Teste de sistema param√©trico"""
        # Sistema param√©trico
        G = SymbolicTransferFunction(self.K * self.wn**2, 
                                   self.s**2 + 2*self.zeta*self.wn*self.s + self.wn**2)
        
        # Substitui valores num√©ricos
        substitutions = {self.K: 1, self.wn: 2, self.zeta: 0.7}
        G_numeric = G.substitute(substitutions)
        
        # Verifica se substitui√ß√£o foi aplicada
        assert G_numeric.numerator == 4  # K*wn^2 = 1*2^2 = 4
        
        # Verifica denominador
        expected_den = self.s**2 + 2*0.7*2*self.s + 4
        expected_den_simplified = self.s**2 + 2.8*self.s + 4
        assert sp.simplify(G_numeric.denominator - expected_den_simplified) == 0
        
        print("‚úÖ Substitui√ß√£o de par√¢metros validada")
    
    def test_analise_estabilidade(self):
        """üîß An√°lise de Estabilidade - Teste de Routh-Hurwitz simb√≥lico"""
        # Polin√¥mio est√°vel: s^3 + 3s^2 + 3s + 1
        stable_poly = self.s**3 + 3*self.s**2 + 3*self.s + 1
        stability_result = symbolic_stability_analysis(stable_poly, self.s)
        
        assert isinstance(stability_result, dict)
        assert 'stable' in stability_result
        assert 'coefficients' in stability_result
        
        # Verifica se coeficientes foram extra√≠dos corretamente
        coeffs = stability_result['coefficients']
        assert len(coeffs) == 4  # [1, 3, 3, 1]
        
        # Polin√¥mio com coeficientes negativos (potencialmente inst√°vel)
        unstable_poly = self.s**2 - self.s + 1
        unstable_result = symbolic_stability_analysis(unstable_poly, self.s)
        
        assert isinstance(unstable_result, dict)
        
        print("‚úÖ An√°lise de estabilidade simb√≥lica validada")
    
    def test_espaco_estados(self):
        """üîß Espa√ßo de Estados - Teste de convers√£o TF ‚Üî SS simb√≥lica"""
        # Cria√ß√£o de sistema em espa√ßo de estados
        A = sp.Matrix([[-1, 1], [0, -2]])
        B = sp.Matrix([[0], [1]])
        C = sp.Matrix([[1, 0]])
        D = sp.Matrix([[0]])
        
        ss = SymbolicStateSpace(A, B, C, D)
        
        # Verifica propriedades b√°sicas
        assert ss.n_states == 2
        assert ss.n_inputs == 1
        assert ss.n_outputs == 1
        
        # Teste de convers√£o para fun√ß√£o de transfer√™ncia
        G_matrix = ss.transfer_function(self.s)
        
        if G_matrix is not None:
            # Verifica se retorna matriz
            assert isinstance(G_matrix, sp.Matrix)
            assert G_matrix.shape == (1, 1)  # 1 sa√≠da, 1 entrada
        
        # Testes de controlabilidade e observabilidade
        is_controllable = ss.is_controllable()
        is_observable = ss.is_observable()
        
        assert isinstance(is_controllable, bool)
        assert isinstance(is_observable, bool)
        
        # Teste de autovalores
        eigenvals = ss.eigenvalues()
        assert isinstance(eigenvals, list)
        
        print("‚úÖ Sistemas em espa√ßo de estados simb√≥licos validados")
    
    def test_recursos_educacionais(self):
        """üîß Recursos Educacionais - Teste de explica√ß√µes passo a passo"""
        # Testa o sistema de hist√≥rico pedag√≥gico
        G1 = SymbolicTransferFunction(1, self.s + 1)
        G2 = SymbolicTransferFunction(1, self.s + 2)
        
        # Opera√ß√£o que gera hist√≥rico
        G_result = G1 * G2
        
        # Verifica se hist√≥rico foi registrado
        assert len(G_result.history.steps) > 0
        
        # Verifica se h√° opera√ß√£o de multiplica√ß√£o no hist√≥rico
        operations = [step.operation for step in G_result.history.steps]
        assert "MULTIPLICA√á√ÉO" in operations
        
        # Teste de formata√ß√£o do hist√≥rico
        history_text = G_result.history.get_formatted_steps("text")
        assert isinstance(history_text, str)
        assert len(history_text) > 0
        
        # Teste de formata√ß√£o LaTeX
        history_latex = G_result.history.get_formatted_steps("latex")
        assert isinstance(history_latex, str)
        
        # Teste de formata√ß√£o HTML
        history_html = G_result.history.get_formatted_steps("html")
        assert isinstance(history_html, str)
        
        print("‚úÖ Sistema de hist√≥rico pedag√≥gico validado")
    
    def test_utilitarios_simbolicos(self):
        """Teste adicional de utilit√°rios simb√≥licos"""
        # Teste de cria√ß√£o de polin√¥mio a partir de ra√≠zes
        roots = [-1, -2, -3]
        poly = poly_from_roots(roots, self.s)
        
        # Deve resultar em (s+1)(s+2)(s+3) = s^3 + 6s^2 + 11s + 6
        # Como poly_from_roots j√° retorna express√£o expandida, comparamos diretamente
        expected = self.s**3 + 6*self.s**2 + 11*self.s + 6
        assert sp.simplify(poly - expected) == 0
        
        # Teste de valida√ß√£o de fun√ß√£o pr√≥pria
        assert validate_proper_tf(1, self.s + 1)  # Pr√≥pria
        assert not validate_proper_tf(self.s**2, self.s + 1)  # Impr√≥pria
        
        print("‚úÖ Utilit√°rios simb√≥licos validados")
    
    def test_integracao_completa(self):
        """Teste de integra√ß√£o completa do n√∫cleo simb√≥lico"""
        # Workflow completo: cria√ß√£o ‚Üí opera√ß√µes ‚Üí an√°lise ‚Üí convers√£o
        
        # 1. Cria√ß√£o de sistemas
        G1 = SymbolicTransferFunction(self.K, self.s + 1)
        G2 = SymbolicTransferFunction(1, self.s + 2)
        
        # 2. Opera√ß√µes
        G_series = G1 * G2
        G_simplified = G_series.simplify()
        
        # 3. Substitui√ß√£o de par√¢metros
        G_numeric = G_simplified.substitute({self.K: 2})
        
        # 4. An√°lise
        poles = G_numeric.poles()
        zeros = G_numeric.zeros()
        
        # 5. Convers√£o para LaTeX
        latex_repr = G_numeric.to_latex()
        
        # 6. Verifica√ß√£o do hist√≥rico completo
        total_steps = len(G_numeric.history.steps)
        assert total_steps >= 3  # Cria√ß√£o + Multiplica√ß√£o + Substitui√ß√£o
        
        # 7. Teste de workflow educacional
        history_formatted = G_numeric.history.get_formatted_steps()
        assert "CRIA√á√ÉO" in history_formatted
        assert "MULTIPLICA√á√ÉO" in history_formatted
        assert "SUBSTITUI√á√ÉO" in history_formatted
        
        print("‚úÖ Integra√ß√£o completa do n√∫cleo simb√≥lico validada")
        print(f"üìä Total de passos no hist√≥rico: {total_steps}")
        print(f"üìä Polos encontrados: {len(poles)}")
        print(f"üìä Zeros encontrados: {len(zeros)}")

def test_summary():
    """Sum√°rio dos testes da Fase 2"""
    print("\n" + "="*80)
    print("üéØ SUM√ÅRIO DOS TESTES - FASE 2: N√öCLEO SIMB√ìLICO")
    print("="*80)
    
    if not SYMPY_AVAILABLE:
        print("‚ùå SymPy n√£o dispon√≠vel - todos os testes foram pulados")
        print(f"   Erro de importa√ß√£o: {IMPORT_ERROR}")
        return
    
    print("‚úÖ Todos os componentes do n√∫cleo simb√≥lico foram implementados e testados:")
    print("   üîß SymbolicTransferFunction - Fun√ß√µes de transfer√™ncia simb√≥licas")
    print("   üîß SymbolicStateSpace - Sistemas em espa√ßo de estados simb√≥licos") 
    print("   üîß OperationHistory - Sistema de hist√≥rico pedag√≥gico")
    print("   üîß Utilit√°rios simb√≥licos - Ferramentas auxiliares")
    print("   üîß Opera√ß√µes matem√°ticas - Multiplica√ß√£o, adi√ß√£o, simplifica√ß√£o")
    print("   üîß An√°lises avan√ßadas - Polos, zeros, estabilidade, controlabilidade")
    print("   üîß Convers√µes - LaTeX, fra√ß√µes parciais, substitui√ß√£o param√©trica")
    print("   üîß Recursos educacionais - Hist√≥rico formatado e explica√ß√µes")
    
    print("\nüöÄ FASE 2 COMPLETAMENTE IMPLEMENTADA E VALIDADA!")
    print("   Pronto para prosseguir para a Fase 3: Interface de An√°lise")

if __name__ == "__main__":
    # Executa teste de sum√°rio
    test_summary()
