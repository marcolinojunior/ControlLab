#!/usr/bin/env python3
"""
ControlLab Module 8 - Agent Integration Launcher
Inicializador simplificado para demonstra√ß√£o dos agentes

Para uso completo, instale: pip install websockets sympy control matplotlib
"""

import os
import sys
import json
import webbrowser
import time
from pathlib import Path
import subprocess
import threading
from http.server import HTTPServer, SimpleHTTPRequestHandler
import argparse


class ControlLabAgentLauncher:
    """
    Lan√ßador simplificado para demonstra√ß√£o do M√≥dulo 8.
    
    Este script:
    1. Inicia servidor HTTP para a interface web
    2. Tenta iniciar servidor WebSocket (se dispon√≠vel)
    3. Abre navegador na interface
    4. Exibe status e instru√ß√µes
    """
    
    def __init__(self, port=8080, auto_browser=True):
        self.port = port
        self.auto_browser = auto_browser
        self.project_root = Path(__file__).parent.parent.parent.parent
        self.frontend_dir = Path(__file__).parent / 'frontend'
        
    def check_dependencies(self):
        """Verifica depend√™ncias dispon√≠veis."""
        deps = {
            'websockets': False,
            'sympy': False,
            'control': False,
            'matplotlib': False,
            'numpy': False
        }
        
        for dep in deps:
            try:
                __import__(dep)
                deps[dep] = True
            except ImportError:
                pass
                
        return deps
    
    def print_status(self, deps):
        """Imprime status do sistema."""
        print("\n" + "="*60)
        print("ü§ñ CONTROLLAB M√ìDULO 8 - INTEGRA√á√ÉO COM AGENTES")
        print("="*60)
        
        print("üì¶ STATUS DAS DEPEND√äNCIAS:")
        for dep, available in deps.items():
            status = "‚úÖ" if available else "‚ùå"
            print(f"  {status} {dep}")
        
        complete = all(deps.values())
        print(f"\nüéØ FUNCIONALIDADE: {'‚úÖ COMPLETA' if complete else '‚ö†Ô∏è LIMITADA'}")
        
        print(f"\nüåê INTERFACE WEB: http://localhost:{self.port}/agent_interface.html")
        
        if not complete:
            print("\nüí° Para funcionalidade completa, execute:")
            print("pip install websockets sympy control matplotlib numpy")
        
        print("="*60)
        return complete
    
    def start_http_server(self):
        """Inicia servidor HTTP para interface."""
        try:
            os.chdir(self.frontend_dir)
            
            handler = SimpleHTTPRequestHandler
            server = HTTPServer(('localhost', self.port), handler)
            
            print(f"üåê Servidor HTTP iniciado na porta {self.port}")
            
            # Executa em thread separada
            server_thread = threading.Thread(
                target=server.serve_forever,
                daemon=True
            )
            server_thread.start()
            
            return server
            
        except Exception as e:
            print(f"‚ùå Erro ao iniciar servidor HTTP: {e}")
            return None
    
    def try_start_websocket(self):
        """Tenta iniciar servidor WebSocket."""
        try:
            # Importa e inicia servidor de agentes
            from .agent_integration import WebSocketAgentServer
            
            print("üîå Tentando iniciar servidor WebSocket...")
            
            # Executa em subprocess para n√£o bloquear
            script_path = Path(__file__).parent / 'agent_integration.py'
            proc = subprocess.Popen([
                sys.executable, str(script_path), '--server'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            print("‚úÖ Servidor WebSocket iniciado")
            return proc
            
        except ImportError:
            print("‚ö†Ô∏è WebSocket n√£o dispon√≠vel - instale 'websockets'")
            return None
        except Exception as e:
            print(f"‚ùå Erro ao iniciar WebSocket: {e}")
            return None
    
    def open_browser(self):
        """Abre navegador na interface."""
        if self.auto_browser:
            url = f"http://localhost:{self.port}/agent_interface.html"
            try:
                time.sleep(2)  # Aguarda servidor estabilizar
                webbrowser.open(url)
                print(f"üåê Navegador aberto em {url}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao abrir navegador: {e}")
    
    def run(self):
        """Executa o lan√ßador."""
        print("üöÄ Iniciando ControlLab Agent Launcher...")
        
        # Verifica depend√™ncias
        deps = self.check_dependencies()
        complete = self.print_status(deps)
        
        # Inicia servidor HTTP
        http_server = self.start_http_server()
        if not http_server:
            return
        
        # Tenta iniciar WebSocket
        ws_process = self.try_start_websocket()
        
        # Abre navegador
        browser_thread = threading.Thread(target=self.open_browser, daemon=True)
        browser_thread.start()
        
        print("\nüéÆ COMO USAR:")
        print("1. A interface web abrir√° automaticamente")
        print("2. Digite comandos no chat (ex: 'Analise G(s) = 1/(s+1)')")
        print("3. Use Ctrl+C para parar")
        
        if not complete:
            print("\n‚ö†Ô∏è MODO DEMONSTRA√á√ÉO:")
            print("‚Ä¢ Interface web dispon√≠vel")
            print("‚Ä¢ Funcionalidades limitadas sem depend√™ncias")
            print("‚Ä¢ Instale depend√™ncias para uso completo")
        
        try:
            print("\n‚úÖ Servidores rodando. Pressione Ctrl+C para parar.\n")
            
            # Mant√©m programa rodando
            while True:
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\nüõë Parando servidores...")
            
            if http_server:
                http_server.shutdown()
            
            if ws_process:
                ws_process.terminate()
                
            print("‚úÖ ControlLab Agent Launcher parado")


def main():
    """Fun√ß√£o principal."""
    parser = argparse.ArgumentParser(
        description='ControlLab M√≥dulo 8 - Lan√ßador de Agentes'
    )
    parser.add_argument('--port', type=int, default=8080,
                       help='Porta do servidor HTTP (padr√£o: 8080)')
    parser.add_argument('--no-browser', action='store_true',
                       help='N√£o abre navegador automaticamente')
    
    args = parser.parse_args()
    
    launcher = ControlLabAgentLauncher(
        port=args.port,
        auto_browser=not args.no_browser
    )
    launcher.run()


if __name__ == "__main__":
    main()
