"""
M√≥dulo de Convers√µes entre Representa√ß√µes
=========================================

Este m√≥dulo implementa convers√µes entre diferentes representa√ß√µes de sistemas
(fun√ß√£o de transfer√™ncia, espa√ßo de estados) e opera√ß√µes entre sistemas.

Fun√ß√µes:
    tf_to_ss: Converte fun√ß√£o de transfer√™ncia para espa√ßo de estados
    ss_to_tf: Converte espa√ßo de estados para fun√ß√£o de transfer√™ncia
    parallel_to_series: Conecta sistemas em paralelo
    series_to_parallel: Converte conex√£o s√©rie para paralela
    feedback_connection: Implementa realimenta√ß√£o
"""

import sympy as sp
import numpy as np
from sympy import symbols, Matrix, eye, zeros, solve, simplify
from typing import Dict, List, Tuple, Any, Optional, Union
import warnings

# Importar classes do core se dispon√≠veis
try:
    from ..core.symbolic_tf import SymbolicTransferFunction
    from ..core.symbolic_ss import SymbolicStateSpace
except ImportError:
    # Fallback para desenvolvimento
    SymbolicTransferFunction = None
    SymbolicStateSpace = None


class ConversionHistory:
    """Hist√≥rico de convers√µes para fins pedag√≥gicos"""

    def __init__(self):
        self.steps = []
        self.method = ""
        self.original_form = ""
        self.target_form = ""

    def add_step(self, description: str, result: Any, explanation: str = ""):
        step = {
            'step': len(self.steps) + 1,
            'description': description,
            'result': result,
            'explanation': explanation
        }
        self.steps.append(step)

    def get_formatted_report(self) -> str:
        if not self.steps:
            return "Nenhuma convers√£o registrada."

        report = f"üîÑ CONVERS√ÉO {self.original_form} ‚Üí {self.target_form}\n"
        report += "=" * 60 + "\n"
        report += f"M√©todo utilizado: {self.method}\n\n"

        for step in self.steps:
            report += f"üìã Passo {step['step']}: {step['description']}\n"
            report += f"Resultado: {step['result']}\n"
            if step['explanation']:
                report += f"Explica√ß√£o: {step['explanation']}\n"
            report += "-" * 40 + "\n"

        return report


def tf_to_ss(tf_obj, form='controllable'):
    """
    Converte fun√ß√£o de transfer√™ncia para representa√ß√£o em espa√ßo de estados

    Args:
        tf_obj: Objeto SymbolicTransferFunction ou express√£o simb√≥lica
        form: Forma can√¥nica ('controllable', 'observable')

    Returns:
        Dicion√°rio contendo o objeto SymbolicStateSpace e outros dados.
    """
    history = ConversionHistory()
    history.original_form = "Fun√ß√£o de Transfer√™ncia"
    history.target_form = "Espa√ßo de Estados"
    history.method = f"Forma can√¥nica {form}"

    try:
        # Extrair numerador e denominador
        if hasattr(tf_obj, 'numerator') and hasattr(tf_obj, 'denominator'):
            num = tf_obj.numerator
            den = tf_obj.denominator
            s = tf_obj.variable
        else:
            # Assumir que √© uma express√£o simb√≥lica
            num = sp.numer(tf_obj)
            den = sp.denom(tf_obj)
            s = list(tf_obj.free_symbols)[0]

        history.add_step(
            "Extra√ß√£o de numerador e denominador",
            f"N(s) = {num}, D(s) = {den}",
            "Identificando polin√¥mios da fun√ß√£o de transfer√™ncia"
        )

        # Obter coeficientes
        num_coeffs = sp.Poly(num, s).all_coeffs()
        den_coeffs = sp.Poly(den, s).all_coeffs()

        # Normalizar pelo coeficiente principal do denominador
        leading_coeff = den_coeffs[0]
        den_coeffs = [c/leading_coeff for c in den_coeffs]
        num_coeffs = [c/leading_coeff for c in num_coeffs]

        history.add_step(
            "Normaliza√ß√£o de coeficientes",
            f"Denominador normalizado: {den_coeffs}",
            "Dividindo por coeficiente principal"
        )

        n = len(den_coeffs) - 1  # Ordem do sistema
        m = len(num_coeffs) - 1  # Ordem do numerador

        # Garantir que numerador tenha mesma ordem do denominador (padding com zeros)
        if m < n:
            num_coeffs = [0] * (n - m) + num_coeffs

        if form.lower() == 'controllable':
            A, B, C, D = _controllable_canonical_form(den_coeffs, num_coeffs, n)
            form_name = "control√°vel"
        elif form.lower() == 'observable':
            A, B, C, D = _observable_canonical_form(den_coeffs, num_coeffs, n)
            form_name = "observ√°vel"
        else:
            raise ValueError(f"Forma '{form}' n√£o reconhecida. Use 'controllable' ou 'observable'")

        history.add_step(
            f"Constru√ß√£o da forma can√¥nica {form_name}",
            f"Matrizes A({n}x{n}), B({n}x1), C(1x{n}), D(1x1)",
            f"Representa√ß√£o em espa√ßo de estados na forma {form_name}"
        )

        history.add_step(
            "Resultado final",
            f"A = {A}\nB = {B}\nC = {C}\nD = {D}",
            "Sistema convertido com sucesso"
        )

        # Retornar dicion√°rio com matrizes e hist√≥rico
        result = {
            'A': A,
            'B': B,
            'C': C,
            'D': D,
            'history': history,
            'form': form
        }

        # Adicionar objeto SymbolicStateSpace se dispon√≠vel
        if SymbolicStateSpace:
            ss_obj = SymbolicStateSpace(A, B, C, D)
            ss_obj.conversion_history = history
            result['ss_object'] = ss_obj

        return result

    except Exception as e:
        history.add_step(
            "Erro na convers√£o",
            str(e),
            "Falha durante o processo de convers√£o"
        )
        raise ValueError(f"Erro na convers√£o TF‚ÜíSS: {e}")


def ss_to_tf(ss_obj):
    """
    Converte representa√ß√£o em espa√ßo de estados para fun√ß√£o de transfer√™ncia

    Args:
        ss_obj: Objeto SymbolicStateSpace ou tupla (A, B, C, D)

    Returns:
        Fun√ß√£o de transfer√™ncia simb√≥lica
    """
    history = ConversionHistory()
    history.original_form = "Espa√ßo de Estados"
    history.target_form = "Fun√ß√£o de Transfer√™ncia"
    history.method = "F√≥rmula G(s) = C(sI - A)‚Åª¬πB + D"

    try:
        # Extrair matrizes
        if hasattr(ss_obj, 'A'):
            A, B, C, D = ss_obj.A, ss_obj.B, ss_obj.C, ss_obj.D
            s = ss_obj.A.free_symbols.pop() if ss_obj.A.free_symbols else symbols('s')
        else:
            A, B, C, D = ss_obj
            s = symbols('s')

        history.add_step(
            "Extra√ß√£o de matrizes",
            f"A = {A}, B = {B}, C = {C}, D = {D}",
            "Identificando matrizes do sistema em espa√ßo de estados"
        )

        n = A.shape[0]

        # Calcular (sI - A)
        sI_minus_A = s * eye(n) - A

        history.add_step(
            "C√°lculo de (sI - A)",
            sI_minus_A,
            "Matriz caracter√≠stica do sistema"
        )

        # Calcular inversa (sI - A)‚Åª¬π
        inv_sI_minus_A = sI_minus_A.inv()

        history.add_step(
            "C√°lculo da inversa",
            inv_sI_minus_A,
            "Inversa da matriz caracter√≠stica"
        )

        # Calcular G(s) = C(sI - A)‚Åª¬πB + D
        tf_matrix = C * inv_sI_minus_A * B + D

        # Para sistemas SISO, extrair elemento escalar
        if tf_matrix.shape == (1, 1):
            tf_expr = tf_matrix[0, 0]
        else:
            tf_expr = tf_matrix

        # Simplificar a express√£o
        tf_simplified = simplify(tf_expr)

        history.add_step(
            "C√°lculo da fun√ß√£o de transfer√™ncia",
            tf_simplified,
            "G(s) = C(sI - A)‚Åª¬πB + D simplificada"
        )

        # Retornar objeto SymbolicTransferFunction se dispon√≠vel
        if SymbolicTransferFunction and tf_matrix.shape == (1, 1):
            num_simp, den_simp = tf_simplified.as_numer_denom()
            tf_obj = SymbolicTransferFunction(num_simp, den_simp, s=s)
            tf_obj.conversion_history = history
            return tf_obj
        else:
            return tf_simplified, history

    except Exception as e:
        history.add_step(
            "Erro na convers√£o",
            str(e),
            "Falha durante o processo de convers√£o"
        )
        raise ValueError(f"Erro na convers√£o SS‚ÜíTF: {e}")


def parallel_to_series(tf_list):
    """
    Converte conex√£o em paralelo para equivalente em s√©rie

    Args:
        tf_list: Lista de fun√ß√µes de transfer√™ncia em paralelo

    Returns:
        Fun√ß√£o de transfer√™ncia equivalente
    """
    if not tf_list:
        raise ValueError("Lista de fun√ß√µes de transfer√™ncia n√£o pode estar vazia")

    # Soma das fun√ß√µes de transfer√™ncia
    result = tf_list[0]
    for tf in tf_list[1:]:
        result = result + tf

    return simplify(result)


def series_to_parallel(tf_cascaded):
    """
    Analisa conex√£o em s√©rie para identificar componentes

    Args:
        tf_cascaded: Fun√ß√£o de transfer√™ncia resultante da cascata

    Returns:
        An√°lise da decomposi√ß√£o (informativo)
    """
    s = list(tf_cascaded.free_symbols)[0]

    # Tentar fatorar numerador e denominador
    num = sp.numer(tf_cascaded)
    den = sp.denom(tf_cascaded)

    num_factors = sp.factor(num)
    den_factors = sp.factor(den)

    analysis = {
        'original': tf_cascaded,
        'numerator_factors': num_factors,
        'denominator_factors': den_factors,
        'note': 'Fatora√ß√£o pode revelar componentes individuais da cascata'
    }

    return analysis


def feedback_connection(forward_tf, feedback_tf=1, sign=-1):
    """
    Implementa conex√£o com realimenta√ß√£o

    Args:
        forward_tf: Fun√ß√£o de transfer√™ncia direta G(s)
        feedback_tf: Fun√ß√£o de transfer√™ncia de realimenta√ß√£o H(s)
        sign: Sinal da realimenta√ß√£o (+1 positiva, -1 negativa)

    Returns:
        Fun√ß√£o de transfer√™ncia de malha fechada
    """
    history = ConversionHistory()
    history.original_form = "Sistema em Malha Aberta"
    history.target_form = "Sistema em Malha Fechada"
    history.method = f"Realimenta√ß√£o {'negativa' if sign == -1 else 'positiva'}"

    try:
        if not isinstance(forward_tf, SymbolicTransferFunction):
            forward_tf = SymbolicTransferFunction(forward_tf, 1)
        if not isinstance(feedback_tf, SymbolicTransferFunction):
            feedback_tf = SymbolicTransferFunction(feedback_tf, 1)

        history.add_step(
            "Configura√ß√£o inicial",
            f"G(s) = {forward_tf}, H(s) = {feedback_tf}",
            f"Realimenta√ß√£o com sinal {'+' if sign == 1 else '-'}"
        )

        # F√≥rmula de malha fechada: T(s) = G(s) / (1 - sign * G(s)H(s))
        loop_gain = forward_tf * feedback_tf
        denominator = 1 - (sign * loop_gain) # Corrected logic

        closed_loop_tf = forward_tf / denominator

        history.add_step(
            "Aplica√ß√£o da f√≥rmula",
            f"T(s) = G(s) / (1 {'-' if sign == -1 else '+'} G(s)H(s))",
            "F√≥rmula padr√£o para sistemas realimentados"
        )

        simplified_tf = closed_loop_tf.simplify()

        history.add_step(
            "Resultado simplificado",
            simplified_tf,
            "Fun√ß√£o de transfer√™ncia de malha fechada"
        )

        simplified_tf.feedback_history = history

        return simplified_tf, history

    except Exception as e:
        history.add_step(
            "Erro na conex√£o",
            str(e),
            "Falha durante o c√°lculo da realimenta√ß√£o"
        )
        raise ValueError(f"Erro na conex√£o com realimenta√ß√£o: {e}")


def _controllable_canonical_form(den_coeffs, num_coeffs, n):
    """Constr√≥i forma can√¥nica control√°vel"""
    A = zeros(n, n)
    if n > 0:
        for i in range(n):
            A[n-1, i] = -den_coeffs[n-i]
        for i in range(n-1):
            A[i, i+1] = 1

    B = zeros(n, 1)
    if n > 0:
        B[n-1, 0] = 1

    C = zeros(1, n)
    b0 = num_coeffs[0]
    for i in range(n):
        C[0, i] = num_coeffs[n-i] - den_coeffs[n-i] * b0

    D = Matrix([[num_coeffs[0]]])

    return A, B, C, D


def _observable_canonical_form(den_coeffs, num_coeffs, n):
    """Constr√≥i forma can√¥nica observ√°vel"""
    A_c, B_c, C_c, D_c = _controllable_canonical_form(den_coeffs, num_coeffs, n)
    A = A_c.T
    B = C_c.T
    C = B_c.T
    D = D_c

    return A, B, C, D


def analyze_system_connection(tf1, tf2, connection_type='series'):
    """
    Analisa a conex√£o entre dois sistemas
    """
    analysis = {
        'system1': tf1, 'system2': tf2, 'connection': connection_type
    }
    if connection_type == 'series':
        result = tf1 * tf2
        analysis['result'] = simplify(result)
        analysis['description'] = "Multiplica√ß√£o das fun√ß√µes de transfer√™ncia"
    elif connection_type == 'parallel':
        result = tf1 + tf2
        analysis['result'] = simplify(result)
        analysis['description'] = "Soma das fun√ß√µes de transfer√™ncia"
    elif connection_type == 'feedback':
        result = tf1 / (1 + tf1 * tf2)
        analysis['result'] = simplify(result)
        analysis['description'] = "Realimenta√ß√£o negativa unit√°ria"
    else:
        raise ValueError(f"Tipo de conex√£o '{connection_type}' n√£o reconhecido")
    return analysis


def validate_conversion(original, converted, conversion_type):
    """
    Valida uma convers√£o entre representa√ß√µes
    """
    validation = {
        'conversion_type': conversion_type, 'success': False, 'errors': [], 'warnings': []
    }
    try:
        if conversion_type == 'tf_to_ss_to_tf':
            recovered_tf, _ = ss_to_tf(converted)
            diff = simplify(original.expression - recovered_tf.expression)
            if diff == 0:
                validation['success'] = True
            else:
                validation['errors'].append(f"Diferen√ßa na convers√£o: {diff}")
        validation['success'] = len(validation['errors']) == 0
    except Exception as e:
        validation['errors'].append(f"Erro na valida√ß√£o: {e}")
    return validation
