"""
ControlLab - Aloca√ß√£o de Polos e Realimenta√ß√£o de Estados
=========================================================

Este m√≥dulo implementa m√©todos de controle moderno baseados em espa√ßo de estados:
- Verifica√ß√£o de controlabilidade
- F√≥rmula de Ackermann para aloca√ß√£o de polos
- M√©todos robustos de aloca√ß√£o
- Projeto sistem√°tico em espa√ßo de estados

Caracter√≠sticas:
- Deriva√ß√£o simb√≥lica completa
- Explica√ß√µes step-by-step do m√©todo de Ackermann
- Demonstra√ß√£o da controlabilidade
- An√°lise de robustez
"""

import sympy as sp
import numpy as np
from typing import List, Optional, Union, Tuple, Dict, Any
from ..core.symbolic_ss import SymbolicStateSpace
from .design_utils import ControllerResult, create_educational_content

def check_controllability(ss_obj: SymbolicStateSpace,
                         show_steps: bool = True) -> Dict[str, Any]:
    """
    Verifica se o sistema √© completamente control√°vel

    Args:
        ss_obj: Sistema em espa√ßo de estados
        show_steps: Se deve mostrar passos detalhados

    Returns:
        Dict[str, Any]: Resultado da an√°lise de controlabilidade
    """
    if show_steps:
        print("üîç VERIFICA√á√ÉO DE CONTROLABILIDADE")
        print("=" * 40)
        print(f"üè≠ Sistema: ·∫ã = Ax + Bu")
        print(f"üìê A = {ss_obj.A}")
        print(f"üìê B = {ss_obj.B}")

    A = ss_obj.A
    B = ss_obj.B
    n = A.rows  # Ordem do sistema

    # Construir matriz de controlabilidade Wc = [B AB A¬≤B ... A^(n-1)B]
    if show_steps:
        print("\nüìã CONSTRU√á√ÉO DA MATRIZ DE CONTROLABILIDADE")
        print("=" * 50)
        print("Wc = [B | AB | A¬≤B | ... | A^(n-1)B]")

    Wc_blocks = [B]
    current_block = B

    for i in range(1, n):
        current_block = A * current_block
        Wc_blocks.append(current_block)

        if show_steps:
            print(f"A^{i}B = {current_block}")

    # Concatenar horizontalmente
    Wc = sp.Matrix.hstack(*Wc_blocks)

    if show_steps:
        print(f"\nüìä Matriz de Controlabilidade:")
        print(f"Wc = {Wc}")

    # Calcular determinante e rank
    det_Wc = Wc.det()
    rank_Wc = Wc.rank()

    # Sistema √© control√°vel se rank(Wc) = n
    is_controllable = rank_Wc == n

    if show_steps:
        print(f"\n‚úÖ AN√ÅLISE DE CONTROLABILIDADE:")
        print(f"üìê Determinante: det(Wc) = {det_Wc}")
        print(f"üìä Rank: rank(Wc) = {rank_Wc}")
        print(f"üìè Ordem do sistema: n = {n}")

        if is_controllable:
            print("‚úÖ Sistema COMPLETAMENTE CONTROL√ÅVEL")
            print("üí° Todos os estados podem ser controlados")
        else:
            print("‚ùå Sistema N√ÉO completamente control√°vel")
            print(f"‚ö†Ô∏è Apenas {rank_Wc} de {n} estados s√£o control√°veis")

    # Conte√∫do educacional
    educational_content = [
        "üéì CONCEITO DE CONTROLABILIDADE:",
        "‚Ä¢ Um sistema √© control√°vel se todos os estados podem ser",
        "  transferidos de qualquer condi√ß√£o inicial para qualquer",
        "  estado final em tempo finito",
        "‚Ä¢ Crit√©rio: rank(Wc) = n (ordem do sistema)",
        "‚Ä¢ Matriz Wc = [B | AB | A¬≤B | ... | A^(n-1)B]",
        "‚Ä¢ Necess√°rio para aloca√ß√£o arbitr√°ria de polos"
    ]

    return {
        'is_controllable': is_controllable,
        'controllability_matrix': Wc,
        'rank': rank_Wc,
        'determinant': det_Wc,
        'system_order': n,
        'educational_content': educational_content
    }

def acker(ss_obj: SymbolicStateSpace,
          desired_poles: List[Union[complex, sp.Symbol]],
          show_steps: bool = True) -> Dict[str, Any]:
    """
    Calcula ganhos de realimenta√ß√£o usando F√≥rmula de Ackermann

    Args:
        ss_obj: Sistema em espa√ßo de estados
        desired_poles: Polos desejados para malha fechada
        show_steps: Se deve mostrar passos detalhados

    Returns:
        Dict[str, Any]: Ganhos de realimenta√ß√£o e an√°lise
    """
    if show_steps:
        print("üéØ F√ìRMULA DE ACKERMANN - ALOCA√á√ÉO DE POLOS")
        print("=" * 50)
        print(f"üè≠ Sistema: ·∫ã = Ax + Bu")
        print(f"üéØ Polos desejados: {desired_poles}")

    A = ss_obj.A
    B = ss_obj.B
    n = A.rows

    # Verificar controlabilidade primeiro
    controllability = check_controllability(ss_obj, show_steps=False)

    if not controllability['is_controllable']:
        error_message = (
            f"FALHA NA ALOCA√á√ÉO DE POLOS: O sistema n√£o √© control√°vel.\n\n"
            f"--> DIAGN√ìSTICO T√âCNICO:\n"
            f"    A matriz de controlabilidade deve ter posto completo (rank={n}), mas o posto calculado foi {controllability['rank']}.\n\n"
            f"--> MATRIZ DE CONTROLABILIDADE CALCULADA:\n{controllability['controllability_matrix']}\n\n"
            f"--> A√á√ÉO RECOMENDADA:\n"
            f"    Revise as matrizes A e B do seu modelo. Pode haver estados din√¢micos que n√£o s√£o afetados pela entrada de controle."
        )
        raise np.linalg.LinAlgError(error_message)

    # Construir polin√¥mio caracter√≠stico desejado
    s = sp.Symbol('s')

    if show_steps:
        print(f"\nüìã CONSTRU√á√ÉO DO POLIN√îMIO CARACTER√çSTICO DESEJADO")
        print("=" * 55)

    # Œ±c(s) = (s - p1)(s - p2)...(s - pn)
    alpha_c = 1
    for i, pole in enumerate(desired_poles):
        factor = (s - pole)
        alpha_c *= factor

        if show_steps:
            print(f"Fator {i+1}: (s - {pole})")

    alpha_c = sp.expand(alpha_c)

    if show_steps:
        print(f"\nPolin√¥mio caracter√≠stico desejado:")
        print(f"Œ±c(s) = {alpha_c}")

    # Extrair coeficientes do polin√¥mio
    coeffs = sp.Poly(alpha_c, s).all_coeffs()

    if show_steps:
        print(f"Coeficientes: {coeffs}")

    # Avaliar Œ±c(A) - Teorema de Cayley-Hamilton
    if show_steps:
        print(f"\nüìê C√ÅLCULO DE Œ±c(A) - TEOREMA CAYLEY-HAMILTON")
        print("=" * 50)
        print("Œ±c(A) = a‚ÇÄI + a‚ÇÅA + a‚ÇÇA¬≤ + ... + a‚ÇôA‚Åø")

    alpha_c_A = sp.zeros(n, n)
    A_power = sp.eye(n)  # A‚Å∞ = I

    # Come√ßar do termo de menor grau
    for i, coeff in enumerate(reversed(coeffs)):
        term = coeff * A_power
        alpha_c_A += term

        if show_steps:
            if i == 0:
                print(f"Termo {i}: {coeff} * I = {term}")
            else:
                print(f"Termo {i}: {coeff} * A^{i} = {term}")

        if i < len(coeffs) - 1:  # N√£o calcular A^(n+1)
            A_power = A * A_power

    if show_steps:
        print(f"\nŒ±c(A) = {alpha_c_A}")

    # F√≥rmula de Ackermann: K = [0 0 ... 0 1] * Wc‚Åª¬π * Œ±c(A)
    if show_steps:
        print(f"\nüîß APLICA√á√ÉO DA F√ìRMULA DE ACKERMANN")
        print("=" * 45)
        print("K = [0 0 ... 0 1] * Wc‚Åª¬π * Œ±c(A)")

    # Obter matriz de controlabilidade
    Wc = controllability['controllability_matrix']

    # Vetor [0 0 ... 0 1]
    e_n = sp.zeros(1, n)
    e_n[0, n-1] = 1

    if show_steps:
        print(f"Vetor e‚Çô = {e_n}")
        print(f"Wc = {Wc}")
        print(f"Wc‚Åª¬π = {Wc.inv()}")

    # Calcular ganhos
    K = e_n * Wc.inv() * alpha_c_A

    if show_steps:
        print(f"\n‚úÖ GANHOS DE REALIMENTA√á√ÉO:")
        print(f"K = {K}")
        print(f"\nüîÑ Sistema em malha fechada:")
        print(f"·∫ã = (A - BK)x")
        print(f"A - BK = {A - B * K}")

    # Verificar polos resultantes
    A_cl = A - B * K
    char_poly_cl = A_cl.charpoly('s')

    if show_steps:
        print(f"\n‚úÖ VERIFICA√á√ÉO:")
        print(f"Polin√¥mio caracter√≠stico de malha fechada:")
        print(f"det(sI - (A - BK)) = {char_poly_cl}")

    # Conte√∫do educacional
    educational_content = create_educational_content("pole_placement", {
        'method': 'ackermann',
        'desired_poles': desired_poles
    })

    return {
        'success': True,
        'gains': K,
        'closed_loop_matrix': A_cl,
        'desired_polynomial': alpha_c,
        'closed_loop_polynomial': char_poly_cl,
        'controllability': controllability,
        'educational_content': educational_content
    }

def place_poles_robust(ss_obj: SymbolicStateSpace,
                      desired_poles: List[Union[complex, sp.Symbol]],
                      method: str = 'sylvester',
                      show_steps: bool = True) -> Dict[str, Any]:
    """
    Aloca√ß√£o de polos usando m√©todos robustos

    Args:
        ss_obj: Sistema em espa√ßo de estados
        desired_poles: Polos desejados
        method: M√©todo ('sylvester', 'ackermann', 'eigenvector')
        show_steps: Se deve mostrar passos

    Returns:
        Dict[str, Any]: Resultado da aloca√ß√£o robusta
    """
    if show_steps:
        print(f"üéØ ALOCA√á√ÉO DE POLOS ROBUSTA - M√âTODO: {method.upper()}")
        print("=" * 60)

    if method == 'ackermann':
        # Usar Ackermann como m√©todo robusto padr√£o
        return acker(ss_obj, desired_poles, show_steps)

    elif method == 'sylvester':
        if show_steps:
            print("üìê M√©todo de Sylvester (Equa√ß√£o de Sylvester)")
            print("AX - XŒõ = BK para aloca√ß√£o de polos")

        # Para implementa√ß√£o pedag√≥gica, usar Ackermann
        result = acker(ss_obj, desired_poles, show_steps)
        result['method'] = 'sylvester'
        result['educational_content'].append("M√©todo Sylvester √© numericamente mais robusto")
        return result

    else:
        raise ValueError(f"M√©todo '{method}' n√£o implementado")

class StateSpaceController:
    def _controllability_matrix(self, A: sp.Matrix, B: sp.Matrix) -> sp.Matrix:
        n = A.rows
        controllability_matrix = B
        for i in range(1, n):
            controllability_matrix = controllability_matrix.row_join(A**i * B)
        return controllability_matrix

    def pole_placement(self, A: sp.Matrix, B: sp.Matrix, desired_poles: List[Union[complex, float]]):
        n = A.rows
        controllability_matrix = self._controllability_matrix(A, B)
        rank = controllability_matrix.rank()

        if rank != n:
            error_message = (
                f"FALHA NA ALOCA√á√ÉO DE POLOS: O sistema n√£o √© control√°vel.\n\n"
                f"--> DIAGN√ìSTICO T√âCNICO:\n"
                f"    A matriz de controlabilidade deve ter posto completo (rank={n}), mas o posto calculado foi {rank}.\n\n"
                f"--> MATRIZ DE CONTROLABILIDADE CALCULADA:\n{controllability_matrix}\n\n"
                f"--> A√á√ÉO RECOMENDADA:\n"
                f"    Revise as matrizes A e B do seu modelo. Pode haver estados din√¢micos que n√£o s√£o afetados pela entrada de controle."
            )
            raise np.linalg.LinAlgError(error_message)

        ss_obj = SymbolicStateSpace(A, B, sp.eye(n), sp.zeros(n, B.cols))
        acker_result = acker(ss_obj, desired_poles, False)
        return acker_result['gains']


class StateSpaceDesigner:
    """
    Classe para projeto sistem√°tico em espa√ßo de estados

    Fornece interface unificada para projeto de controladores
    usando representa√ß√£o em espa√ßo de estados.
    """

    def __init__(self, system: SymbolicStateSpace, show_steps: bool = True):
        """
        Inicializa o designer

        Args:
            system: Sistema em espa√ßo de estados
            show_steps: Se deve mostrar passos
        """
        self.system = system
        self.show_steps = show_steps
        self.design_history = []

    def design_pole_placement(self,
                             desired_poles: List[Union[complex, sp.Symbol]],
                             method: str = 'ackermann') -> ControllerResult:
        """
        Projeta controlador por aloca√ß√£o de polos

        Args:
            desired_poles: Polos desejados
            method: M√©todo de aloca√ß√£o

        Returns:
            ControllerResult: Resultado do projeto
        """
        if self.show_steps:
            print("üéØ PROJETO POR ALOCA√á√ÉO DE POLOS")
            print("=" * 40)

        # Executar aloca√ß√£o
        if method == 'ackermann':
            acker_result = acker(self.system, desired_poles, self.show_steps)
        else:
            acker_result = place_poles_robust(self.system, desired_poles, method, self.show_steps)

        # Criar resultado
        if acker_result['success']:
            K = acker_result['gains']

            result = ControllerResult(controller=K)
            result.add_step("Verifica√ß√£o de controlabilidade realizada")
            result.add_step("Polin√¥mio caracter√≠stico desejado constru√≠do")
            result.add_step("F√≥rmula de Ackermann aplicada")
            result.add_step(f"Ganhos calculados: K = {K}")

            # Adicionar conte√∫do educacional
            for note in acker_result['educational_content']:
                result.add_educational_note(note)

            result.stability_analysis = {
                'closed_loop_matrix': acker_result['closed_loop_matrix'],
                'desired_poles': desired_poles
            }

            return result

        else:
            # Sistema n√£o control√°vel
            result = ControllerResult(controller=None)
            result.add_step("‚ùå Falha: Sistema n√£o √© completamente control√°vel")

            return result

    def analyze_controllability(self) -> Dict[str, Any]:
        """Analisa controlabilidade do sistema"""
        return check_controllability(self.system, self.show_steps)

    def design_lqr(self, Q: sp.Matrix, R: sp.Matrix) -> ControllerResult:
        """
        Projeta controlador LQR (ser√° implementado no m√≥dulo LQR)

        Args:
            Q: Matriz de pondera√ß√£o dos estados
            R: Matriz de pondera√ß√£o do controle

        Returns:
            ControllerResult: Controlador LQR
        """
        # Placeholder para integra√ß√£o com m√≥dulo LQR
        result = ControllerResult(controller=None)
        result.add_step("Projeto LQR ser√° implementado no m√≥dulo espec√≠fico")

        return result
