"""
ControlLab - Regulador Linear Quadr√°tico (LQR)
===============================================

Este m√≥dulo implementa controle √≥timo LQR:
- Solu√ß√£o simb√≥lica da Equa√ß√£o Alg√©brica de Riccati
- Projeto de controlador LQR
- An√°lise de sensibilidade
- Explica√ß√µes pedag√≥gicas detalhadas

Caracter√≠sticas:
- Deriva√ß√£o simb√≥lica da solu√ß√£o
- Explica√ß√µes step-by-step
- An√°lise de propriedades do LQR
- Estudo de sensibilidade param√©trica
"""

import sympy as sp
from typing import Dict, List, Optional, Union, Tuple, Any
from ..core.symbolic_ss import SymbolicStateSpace
from .design_utils import ControllerResult, create_educational_content

def solve_are_symbolic(A: sp.Matrix, 
                      B: sp.Matrix, 
                      Q: sp.Matrix, 
                      R: sp.Matrix,
                      show_steps: bool = True) -> Dict[str, Any]:
    """
    Resolve a Equa√ß√£o Alg√©brica de Riccati simbolicamente
    
    Args:
        A: Matriz de estado (n√ón)
        B: Matriz de entrada (n√óm)
        Q: Matriz de pondera√ß√£o dos estados (n√ón)
        R: Matriz de pondera√ß√£o do controle (m√óm)
        show_steps: Se deve mostrar passos detalhados
    
    Returns:
        Dict[str, Any]: Solu√ß√£o da ARE e an√°lise
    """
    if show_steps:
        print("üéØ SOLU√á√ÉO DA EQUA√á√ÉO ALG√âBRICA DE RICCATI (ARE)")
        print("=" * 55)
        print("Equa√ß√£o: A^T P + P A - P B R^(-1) B^T P + Q = 0")
        print(f"üìê A = {A}")
        print(f"üìê B = {B}")
        print(f"üìê Q = {Q}")
        print(f"üìê R = {R}")
    
    n = A.rows
    m = B.cols
    
    # Verificar dimens√µes
    if show_steps:
        print(f"\nüìä VERIFICA√á√ÉO DE DIMENS√ïES:")
        print(f"Sistema de ordem n = {n}")
        print(f"N√∫mero de entradas m = {m}")
        print(f"A: {A.rows}√ó{A.cols}")
        print(f"B: {B.rows}√ó{B.cols}")
        print(f"Q: {Q.rows}√ó{Q.cols}")
        print(f"R: {R.rows}√ó{R.cols}")
    
    # Verificar se Q √© semidefinida positiva e R √© definida positiva
    if show_steps:
        print(f"\n‚úÖ CONDI√á√ïES PARA SOLU√á√ÉO:")
        print(f"‚Ä¢ Q deve ser semidefinida positiva (Q ‚â• 0)")
        print(f"‚Ä¢ R deve ser definida positiva (R > 0)")
        print(f"‚Ä¢ Par (A,B) deve ser estabiliz√°vel")
        print(f"‚Ä¢ Par (A,Q^(1/2)) deve ser detect√°vel")
    
    # Para sistemas de ordem baixa, tentar solu√ß√£o anal√≠tica
    if n <= 2:
        return _solve_are_analytical(A, B, Q, R, show_steps)
    else:
        return _solve_are_numerical_symbolic(A, B, Q, R, show_steps)

def _solve_are_analytical(A: sp.Matrix, B: sp.Matrix, Q: sp.Matrix, R: sp.Matrix, 
                         show_steps: bool) -> Dict[str, Any]:
    """Solu√ß√£o anal√≠tica para sistemas de ordem baixa"""
    
    n = A.rows
    
    if show_steps:
        print(f"\nüîß SOLU√á√ÉO ANAL√çTICA PARA SISTEMA DE ORDEM {n}")
        print("=" * 50)
    
    # Criar matriz P simb√≥lica
    P_vars = []
    for i in range(n):
        for j in range(i, n):  # Aproveitar simetria
            P_vars.append(sp.Symbol(f'P_{i+1}{j+1}', real=True))
    
    # Construir matriz P sim√©trica
    P = sp.zeros(n, n)
    var_idx = 0
    for i in range(n):
        for j in range(i, n):
            P[i, j] = P_vars[var_idx]
            if i != j:
                P[j, i] = P_vars[var_idx]  # Simetria
            var_idx += 1
    
    if show_steps:
        print(f"üìê Matriz P (sim√©trica):")
        print(f"P = {P}")
    
    # Montar equa√ß√£o de Riccati: A^T P + P A - P B R^(-1) B^T P + Q = 0
    R_inv = R.inv()
    riccati_eq = A.T * P + P * A - P * B * R_inv * B.T * P + Q
    
    if show_steps:
        print(f"\nüìã EQUA√á√ÉO DE RICCATI:")
        print(f"A^T P + P A - P B R^(-1) B^T P + Q = {riccati_eq}")
    
    # Cada elemento da matriz deve ser zero
    equations = []
    for i in range(n):
        for j in range(i, n):  # Aproveitar simetria
            equations.append(riccati_eq[i, j])
    
    if show_steps:
        print(f"\nüìä SISTEMA DE EQUA√á√ïES ({len(equations)} equa√ß√µes):")
        for i, eq in enumerate(equations):
            print(f"Equa√ß√£o {i+1}: {eq} = 0")
    
    # Tentar resolver sistema
    try:
        solution = sp.solve(equations, P_vars)
        
        if show_steps:
            print(f"\nüîç SOLU√á√ÉO RETORNADA PELO SYMPY:")
            print(f"Tipo: {type(solution)}")
            print(f"Conte√∫do: {solution}")
        
        # Tratar diferentes tipos de retorno do SymPy
        if isinstance(solution, dict) and solution:
            # Solu√ß√£o √∫nica como dicion√°rio
            P_solution = P.subs(solution)
            
            if show_steps:
                print(f"\n‚úÖ SOLU√á√ÉO √öNICA ENCONTRADA:")
                print(f"P = {P_solution}")
            
            return {
                'success': True,
                'P': P_solution,
                'method': 'analytical',
                'equations': equations,
                'solution_dict': solution
            }
            
        elif isinstance(solution, list) and solution:
            # M√∫ltiplas solu√ß√µes - escolher a primeira que faz sentido f√≠sico
            if show_steps:
                print(f"\nüîç PROCESSANDO {len(solution)} SOLU√á√ïES:")
            
            for i, sol in enumerate(solution):
                if show_steps:
                    print(f"Solu√ß√£o {i+1}: {sol}")
                
                try:
                    # Se sol √© uma tupla de valores, criar dicion√°rio
                    if isinstance(sol, (tuple, list)) and len(sol) == len(P_vars):
                        sol_dict = dict(zip(P_vars, sol))
                        if show_steps:
                            print(f"  ‚Üí Mapeamento: {sol_dict}")
                        
                        P_candidate = P.subs(sol_dict)
                        
                        # Verificar se os valores s√£o reais
                        try:
                            # Tentar avaliar numericamente para verificar se √© real
                            P_numeric = sp.Matrix([[float(P_candidate[i,j].evalf()) for j in range(P_candidate.cols)] 
                                                  for i in range(P_candidate.rows)])
                            
                            # Verificar se P √© semidefinida positiva (autovalores ‚â• 0)
                            eigenvals = [float(val.evalf()) for val in P_candidate.eigenvals().keys()]
                            is_positive_semidefinite = all(val >= -1e-10 for val in eigenvals)  # Toler√¢ncia num√©rica
                            
                            if is_positive_semidefinite:
                                if show_steps:
                                    print(f"\n‚úÖ SOLU√á√ÉO FISICAMENTE V√ÅLIDA ENCONTRADA:")
                                    print(f"P = {P_candidate}")
                                    print(f"Autovalores: {eigenvals}")
                                
                                return {
                                    'success': True,
                                    'P': P_candidate,
                                    'method': 'analytical',
                                    'equations': equations,
                                    'solution_dict': sol_dict,
                                    'eigenvalues': eigenvals,
                                    'note': f'Solu√ß√£o {i+1} de {len(solution)} (semidefinida positiva)'
                                }
                            else:
                                if show_steps:
                                    print(f"  ‚ùå Matriz n√£o √© semidefinida positiva (autovalores: {eigenvals})")
                        
                        except (ValueError, TypeError) as ve:
                            if show_steps:
                                print(f"  ‚ùå Erro na avalia√ß√£o num√©rica: {ve}")
                            continue
                    
                    elif isinstance(sol, dict):
                        # Solu√ß√£o j√° em formato de dicion√°rio
                        P_candidate = P.subs(sol)
                        # Similar verifica√ß√£o aqui se necess√°rio
                        
                except Exception as e:
                    if show_steps:
                        print(f"  ‚ùå Erro ao processar solu√ß√£o {i+1}: {e}")
                    continue
            
            # Se chegou aqui, nenhuma solu√ß√£o da lista funcionou
            if show_steps:
                print(f"\n‚ö†Ô∏è Nenhuma das {len(solution)} solu√ß√µes √© fisicamente v√°lida")
            
            return {
                'success': False,
                'method': 'analytical',
                'error': f'Nenhuma das {len(solution)} solu√ß√µes √© fisicamente v√°lida',
                'raw_solutions': solution,
                'note': 'Pode ser necess√°rio m√©todo num√©rico para este sistema'
            }
        
        else:
            if show_steps:
                print(f"\n‚ùå N√£o foi poss√≠vel encontrar solu√ß√£o anal√≠tica")
            
            return {
                'success': False,
                'method': 'analytical',
                'error': 'No analytical solution found'
            }
    
    except Exception as e:
        if show_steps:
            print(f"\n‚ö†Ô∏è Erro na solu√ß√£o anal√≠tica: {e}")
        
        return {
            'success': False,
            'method': 'analytical',
            'error': str(e)
        }

def _solve_are_numerical_symbolic(A: sp.Matrix, B: sp.Matrix, Q: sp.Matrix, R: sp.Matrix,
                                 show_steps: bool) -> Dict[str, Any]:
    """Solu√ß√£o num√©rico-simb√≥lica para sistemas de ordem alta"""
    
    if show_steps:
        print(f"\nüîß M√âTODO HAMILTONIANO PARA SISTEMA DE ORDEM {A.rows}")
        print("=" * 50)
        print("Para sistemas de ordem alta, usar m√©todo Hamiltoniano:")
        print("H = [A  -BR^(-1)B^T]")
        print("    [-Q    -A^T   ]")
    
    n = A.rows
    
    # Construir matriz Hamiltoniana
    R_inv = R.inv()
    BR_inv_BT = B * R_inv * B.T
    
    # Matriz Hamiltoniana 2n√ó2n
    H_upper = sp.Matrix.hstack(A, -BR_inv_BT)
    H_lower = sp.Matrix.hstack(-Q, -A.T)
    H = sp.Matrix.vstack(H_upper, H_lower)
    
    if show_steps:
        print(f"üìê Matriz Hamiltoniana H:")
        print(f"H = {H}")
    
    # Para solu√ß√£o pedag√≥gica, criar P simb√≥lica
    P = sp.MatrixSymbol('P', n, n)
    
    return {
        'success': True,
        'P': P,
        'method': 'hamiltonian',
        'hamiltonian_matrix': H,
        'note': 'Solu√ß√£o requer m√©todos num√©ricos para ordem alta'
    }

def lqr_design(ss_obj: SymbolicStateSpace,
               Q: sp.Matrix,
               R: sp.Matrix,
               show_steps: bool = True) -> ControllerResult:
    """
    Projeta controlador LQR
    
    Args:
        ss_obj: Sistema em espa√ßo de estados
        Q: Matriz de pondera√ß√£o dos estados
        R: Matriz de pondera√ß√£o do controle
        show_steps: Se deve mostrar passos
    
    Returns:
        ControllerResult: Controlador LQR projetado
    """
    if show_steps:
        print("üéØ PROJETO DE CONTROLADOR LQR")
        print("=" * 35)
        print(f"üè≠ Sistema: ·∫ã = Ax + Bu")
        print(f"üìê A = {ss_obj.A}")
        print(f"üìê B = {ss_obj.B}")
        print(f"‚öñÔ∏è Matriz Q = {Q}")
        print(f"‚öñÔ∏è Matriz R = {R}")
    
    A = ss_obj.A
    B = ss_obj.B
    
    result = ControllerResult(controller=None)
    
    # Passo 1: Resolver equa√ß√£o de Riccati
    result.add_step("Resolvendo Equa√ß√£o Alg√©brica de Riccati")
    
    are_result = solve_are_symbolic(A, B, Q, R, show_steps)
    
    if not are_result['success']:
        result.add_step("‚ùå Falha na solu√ß√£o da ARE")
        return result
    
    P = are_result['P']
    result.add_step(f"Solu√ß√£o da ARE: P = {P}")
    
    # Passo 2: Calcular ganhos LQR
    result.add_step("Calculando ganhos LQR: K = R^(-1) B^T P")
    
    R_inv = R.inv()
    K = R_inv * B.T * P
    
    result.controller = K
    result.add_step(f"Ganhos LQR: K = {K}")
    
    # Passo 3: Sistema em malha fechada
    A_cl = A - B * K
    result.add_step(f"Sistema em malha fechada: A_cl = A - BK = {A_cl}")
    
    # Adicionar conte√∫do educacional
    educational_notes = create_educational_content("lqr", {
        'Q': Q, 'R': R
    })
    
    for note in educational_notes:
        result.add_educational_note(note)
    
    # Propriedades do LQR
    result.add_educational_note("PROPRIEDADES IMPORTANTES DO LQR:")
    result.add_educational_note("‚Ä¢ Margem de ganho infinita")
    result.add_educational_note("‚Ä¢ Margem de fase ‚â• 60¬∞")
    result.add_educational_note("‚Ä¢ Sistema em malha fechada sempre est√°vel")
    result.add_educational_note("‚Ä¢ Solu√ß√£o √≥tima para fun√ß√£o custo quadr√°tica")
    
    result.stability_analysis = {
        'closed_loop_matrix': A_cl,
        'riccati_solution': P,
        'cost_matrices': {'Q': Q, 'R': R}
    }
    
    if show_steps:
        print(result.get_formatted_report())
    
    return result

def analyze_lqr_sensitivity(ss_obj: SymbolicStateSpace,
                           Q: sp.Matrix,
                           R: sp.Matrix,
                           param_variations: Dict[str, List[float]],
                           show_steps: bool = True) -> Dict[str, Any]:
    """
    Analisa sensibilidade do LQR a varia√ß√µes param√©tricas
    
    Args:
        ss_obj: Sistema em espa√ßo de estados
        Q, R: Matrizes de pondera√ß√£o
        param_variations: Varia√ß√µes dos par√¢metros
        show_steps: Se deve mostrar passos
    
    Returns:
        Dict[str, Any]: An√°lise de sensibilidade
    """
    if show_steps:
        print("üîç AN√ÅLISE DE SENSIBILIDADE DO LQR")
        print("=" * 40)
        print(f"üìä Varia√ß√µes param√©tricas: {param_variations}")
    
    # Para an√°lise pedag√≥gica, mostrar conceitos
    sensitivity_analysis = {
        'method': 'parametric_variation',
        'base_system': {
            'A': ss_obj.A,
            'B': ss_obj.B,
            'Q': Q,
            'R': R
        },
        'variations': param_variations,
        'properties': [
            "LQR √© naturalmente robusto",
            "Pequenas varia√ß√µes em Q,R causam pequenas varia√ß√µes em K",
            "Margem de estabilidade √© mantida",
            "Fun√ß√£o custo degrada graciosamente"
        ]
    }
    
    if show_steps:
        print("üéì PROPRIEDADES DE ROBUSTEZ DO LQR:")
        for prop in sensitivity_analysis['properties']:
            print(f"‚Ä¢ {prop}")
    
    return sensitivity_analysis

class LQRDesigner:
    """
    Classe para projeto sistem√°tico de controladores LQR
    
    Fornece interface unificada para projeto LQR com
    an√°lise de desempenho e robustez.
    """
    
    def __init__(self, system: SymbolicStateSpace, show_steps: bool = True):
        """
        Inicializa o designer LQR
        
        Args:
            system: Sistema em espa√ßo de estados
            show_steps: Se deve mostrar passos
        """
        self.system = system
        self.show_steps = show_steps
        self.design_history = []
    
    def design(self, Q: sp.Matrix, R: sp.Matrix) -> ControllerResult:
        """
        Projeta controlador LQR
        
        Args:
            Q: Matriz de pondera√ß√£o dos estados
            R: Matriz de pondera√ß√£o do controle
        
        Returns:
            ControllerResult: Controlador LQR
        """
        return lqr_design(self.system, Q, R, self.show_steps)
    
    def tune_weights(self, 
                     state_importance: List[float],
                     control_effort: float) -> Tuple[sp.Matrix, sp.Matrix]:
        """
        Auxilia na sintoniza√ß√£o das matrizes de peso
        
        Args:
            state_importance: Import√¢ncia relativa de cada estado
            control_effort: Penaliza√ß√£o do esfor√ßo de controle
        
        Returns:
            Tuple[sp.Matrix, sp.Matrix]: Matrizes Q e R sintonizadas
        """
        n = self.system.A.rows
        m = self.system.B.cols
        
        # Criar Q diagonal com pesos dos estados
        Q = sp.diag(*state_importance)
        
        # Criar R diagonal com penaliza√ß√£o do controle
        if m == 1:
            R = sp.Matrix([[control_effort]])
        else:
            R = sp.diag(*([control_effort] * m))
        
        if self.show_steps:
            print("üéõÔ∏è SINTONIZA√á√ÉO DE PESOS:")
            print(f"Q (estados) = {Q}")
            print(f"R (controle) = {R}")
        
        return Q, R
    
    def analyze_performance(self, K: sp.Matrix) -> Dict[str, Any]:
        """
        Analisa desempenho do controlador LQR
        
        Args:
            K: Ganhos LQR
        
        Returns:
            Dict[str, Any]: An√°lise de desempenho
        """
        A_cl = self.system.A - self.system.B * K
        
        # Calcular autovalores
        eigenvals = A_cl.eigenvals()
        
        performance = {
            'closed_loop_matrix': A_cl,
            'eigenvalues': eigenvals,
            'stability': 'stable' if all(sp.re(val) < 0 for val in eigenvals.keys()) else 'unstable',
            'lqr_properties': [
                "Margem de ganho infinita",
                "Margem de fase ‚â• 60¬∞",
                "Robustez natural a incertezas"
            ]
        }
        
        return performance
