"""
ControlLab - Utilit√°rios para Projeto de Controladores
======================================================

Este m√≥dulo cont√©m classes e fun√ß√µes utilit√°rias para o projeto de controladores,
incluindo estruturas de dados para resultados e especifica√ß√µes de projeto.

Caracter√≠sticas:
- Classes para organizar resultados de projeto
- Valida√ß√£o de estabilidade e desempenho
- M√©tricas de performance
- Hist√≥rico de passos de projeto
"""

import sympy as sp
import numpy as np
from typing import Dict, List, Optional, Union, Any, Tuple
from dataclasses import dataclass, field
from ..core.symbolic_tf import SymbolicTransferFunction
from ..core.symbolic_ss import SymbolicStateSpace
from ..analysis.system_properties import verify_second_order_approximation

@dataclass
class DesignSpecifications:
    """
    Classe para especifica√ß√µes de projeto de controladores

    Atributos:
        overshoot: Sobressinal m√°ximo permitido (%)
        settling_time: Tempo de acomoda√ß√£o (s)
        rise_time: Tempo de subida (s)
        steady_state_error: Erro em regime permanente
        phase_margin: Margem de fase (graus)
        gain_margin: Margem de ganho (dB)
        bandwidth: Largura de banda (rad/s)
        damping_ratio: Coeficiente de amortecimento
        natural_frequency: Frequ√™ncia natural (rad/s)
    """
    overshoot: Optional[float] = None
    settling_time: Optional[float] = None
    rise_time: Optional[float] = None
    steady_state_error: Optional[float] = None
    phase_margin: Optional[float] = None
    gain_margin: Optional[float] = None
    bandwidth: Optional[float] = None
    damping_ratio: Optional[float] = None
    natural_frequency: Optional[float] = None

    def to_dict(self) -> Dict[str, Any]:
        """Converte especifica√ß√µes para dicion√°rio"""
        return {k: v for k, v in self.__dict__.items() if v is not None}

    def validate(self) -> Tuple[bool, List[str]]:
        """
        Valida se as especifica√ß√µes s√£o consistentes

        Returns:
            Tuple[bool, List[str]]: (v√°lido, lista_de_erros)
        """
        errors = []

        if self.overshoot is not None and (self.overshoot < 0 or self.overshoot > 100):
            errors.append("Sobressinal deve estar entre 0% e 100%")

        if self.settling_time is not None and self.settling_time <= 0:
            errors.append("Tempo de acomoda√ß√£o deve ser positivo")

        if self.damping_ratio is not None and self.damping_ratio < 0:
            errors.append("Coeficiente de amortecimento deve ser n√£o-negativo")

        if self.phase_margin is not None and (self.phase_margin < 0 or self.phase_margin >= 180):
            errors.append("Margem de fase deve estar entre 0¬∞ e 180¬∞")

        return len(errors) == 0, errors

@dataclass
class ControllerResult:
    """
    Classe para armazenar resultados de projeto de controladores

    Atributos:
        controller: Fun√ß√£o de transfer√™ncia do controlador
        closed_loop: Sistema em malha fechada
        specifications_met: Especifica√ß√µes atendidas
        design_steps: Passos do projeto
        performance_metrics: M√©tricas de desempenho
        stability_analysis: An√°lise de estabilidade
        educational_content: Conte√∫do educacional
    """
    controller: Union[SymbolicTransferFunction, SymbolicStateSpace, sp.Matrix]
    closed_loop: Optional[SymbolicTransferFunction] = None
    specifications_met: Dict[str, bool] = field(default_factory=dict)
    design_steps: List[str] = field(default_factory=list)
    performance_metrics: Dict[str, float] = field(default_factory=dict)
    stability_analysis: Dict[str, Any] = field(default_factory=dict)
    educational_content: List[str] = field(default_factory=list)

    def add_step(self, step: str):
        """Adiciona um passo ao hist√≥rico de projeto"""
        self.design_steps.append(step)

    def add_educational_note(self, note: str):
        """Adiciona uma nota educacional"""
        self.educational_content.append(note)

    def get_formatted_report(self) -> str:
        """
        Gera relat√≥rio formatado do projeto

        Returns:
            str: Relat√≥rio completo formatado
        """
        report = []
        report.append("=" * 60)
        report.append("üìã RELAT√ìRIO DE PROJETO DE CONTROLADOR")
        report.append("=" * 60)

        # Controlador projetado
        report.append(f"\nüéØ CONTROLADOR PROJETADO:")
        report.append(f"üìê C(s) = {self.controller}")

        # Sistema em malha fechada
        if self.closed_loop:
            report.append(f"\nüîÑ SISTEMA EM MALHA FECHADA:")
            report.append(f"üìê T(s) = {self.closed_loop}")

        # Especifica√ß√µes atendidas
        if self.specifications_met:
            report.append(f"\n‚úÖ ESPECIFICA√á√ïES ATENDIDAS:")
            for spec, met in self.specifications_met.items():
                status = "‚úÖ" if met else "‚ùå"
                report.append(f"   {status} {spec}")

        # M√©tricas de desempenho
        if self.performance_metrics:
            report.append(f"\nüìä M√âTRICAS DE DESEMPENHO:")
            for metric, value in self.performance_metrics.items():
                report.append(f"   üìà {metric}: {value}")

        # Passos do projeto
        if self.design_steps:
            report.append(f"\nüìã PASSOS DO PROJETO:")
            for i, step in enumerate(self.design_steps, 1):
                report.append(f"   {i}. {step}")

        # Conte√∫do educacional
        if self.educational_content:
            report.append(f"\nüéì NOTAS EDUCACIONAIS:")
            for note in self.educational_content:
                report.append(f"   üìö {note}")

        return "\n".join(report)

def validate_closed_loop_stability(
    plant: SymbolicTransferFunction,
    controller: SymbolicTransferFunction,
    show_steps: bool = True
) -> Tuple[bool, Dict[str, Any]]:
    """
    Valida se o sistema em malha fechada √© est√°vel

    Args:
        plant: Planta do sistema
        controller: Controlador projetado
        show_steps: Se deve mostrar passos detalhados

    Returns:
        Tuple[bool, Dict]: (est√°vel, an√°lise_detalhada)
    """
    from ..analysis.stability_analysis import StabilityAnalysisEngine

    # Calcular sistema em malha fechada
    # T(s) = C(s)G(s) / (1 + C(s)G(s))
    cg = controller * plant
    closed_loop = cg / (1 + cg)
    closed_loop = closed_loop.simplify()

    if show_steps:
        print("üìã VALIDA√á√ÉO DE ESTABILIDADE EM MALHA FECHADA")
        print("=" * 50)
        print(f"üîß Controlador: C(s) = {controller}")
        print(f"üè≠ Planta: G(s) = {plant}")
        print(f"üîÑ Malha fechada: T(s) = {closed_loop}")

    # Analisar estabilidade
    engine = StabilityAnalysisEngine()
    stability_result = engine.comprehensive_analysis(closed_loop, show_all_steps=show_steps)

    if stability_result:
        is_stable = stability_result.is_stable
        analysis = {
            'closed_loop': closed_loop,
            'stability_result': stability_result,
            'is_stable': is_stable
        }
    else:
        is_stable = False
        analysis = {
            'closed_loop': closed_loop,
            'error': 'Falha na an√°lise de estabilidade'
        }

    return is_stable, analysis

def calculate_performance_metrics(
    closed_loop: SymbolicTransferFunction,
    specifications: Optional[DesignSpecifications] = None
) -> Tuple[Dict[str, float], SymbolicTransferFunction]:
    """
    Calcula m√©tricas de desempenho do sistema

    Args:
        closed_loop: Sistema em malha fechada
        specifications: Especifica√ß√µes de projeto

    Returns:
        Tuple[Dict[str, float], SymbolicTransferFunction]: M√©tricas calculadas e o objeto closed_loop modificado
    """
    metrics = {}

    # --- IN√çCIO DA MODIFICA√á√ÉO ---

    # 1. Chama a nova fun√ß√£o de verifica√ß√£o
    is_valid, warning_message, dominant_poles = verify_second_order_approximation(closed_loop)

    # 2. Se a aproxima√ß√£o N√ÉO for v√°lida, adiciona o aviso ao hist√≥rico do objeto
    if not is_valid:
        closed_loop.history.add_step(
            operation="Aviso de An√°lise",
            description="Valida√ß√£o da aproxima√ß√£o de segunda ordem.",
            before=closed_loop,
            after=closed_loop, # O objeto n√£o muda, apenas recebe um aviso
            explanation=warning_message
        )

    # 3. Continua o c√°lculo das m√©tricas...
    # A l√≥gica para calcular overshoot, etc., pode agora usar os 'dominant_poles'
    # retornados pela fun√ß√£o de verifica√ß√£o, sabendo que s√£o os corretos.

    # ... (resto da l√≥gica para calcular overshoot, settling time, etc.)

    # --- FIM DA MODIFICA√á√ÉO ---

    try:
        # Obter polos do sistema
        poles = closed_loop.get_poles()

        if poles:
            if dominant_poles:
                # Encontrar polo dominante (menor |parte_real|)
                dominant_pole = min(dominant_poles, key=lambda p: abs(p.real))

                # Calcular m√©tricas baseadas no polo dominante
                if dominant_pole.imag != 0:  # Polos complexos
                    wn = abs(dominant_pole)  # Frequ√™ncia natural
                    zeta = -dominant_pole.real / wn  # Coeficiente de amortecimento

                    metrics['natural_frequency'] = wn
                    metrics['damping_ratio'] = zeta

                    if zeta < 1:  # Sistema subamortecido
                        # Tempo de acomoda√ß√£o (2% do valor final)
                        metrics['settling_time_2pct'] = 4 / abs(dominant_pole.real)

                        # Sobressinal
                        overshoot = 100 * np.exp(-np.pi * zeta / np.sqrt(1 - zeta**2))
                        metrics['overshoot_percent'] = overshoot

                        # Tempo de pico
                        if zeta < 1:
                            wd = wn * np.sqrt(1 - zeta**2)
                            metrics['peak_time'] = np.pi / wd

                else:  # Polo real
                    # Tempo de acomoda√ß√£o para sistema de primeira ordem
                    metrics['time_constant'] = 1 / abs(dominant_pole.real)
                    metrics['settling_time_2pct'] = 4 * metrics['time_constant']

        # Erro em regime permanente (teorema do valor final)
        s = sp.Symbol('s')
        try:
            # Para entrada degrau unit√°rio
            steady_state_error = 1 - sp.limit(closed_loop.expression, s, 0)
            if steady_state_error.is_real:
                metrics['steady_state_error_step'] = float(steady_state_error)
        except:
            pass

    except Exception as e:
        metrics['calculation_error'] = str(e)

    return metrics, closed_loop

def create_educational_content(method: str, parameters: Dict[str, Any]) -> List[str]:
    """
    Cria conte√∫do educacional baseado no m√©todo de projeto

    Args:
        method: M√©todo de projeto utilizado
        parameters: Par√¢metros do projeto

    Returns:
        List[str]: Lista de explica√ß√µes educacionais
    """
    content = []

    if method == "lead_compensator":
        content.extend([
            "üéì COMPENSADOR LEAD (AVAN√áO DE FASE):",
            "‚Ä¢ Adiciona fase positiva para melhorar margem de fase",
            "‚Ä¢ F√≥rmula: C(s) = K(s + z)/(s + p), onde p > z",
            "‚Ä¢ Aumenta largura de banda e velocidade de resposta",
            "‚Ä¢ Pode amplificar ru√≠do em altas frequ√™ncias"
        ])

    elif method == "lag_compensator":
        content.extend([
            "üéì COMPENSADOR LAG (ATRASO DE FASE):",
            "‚Ä¢ Reduz erro em regime permanente",
            "‚Ä¢ F√≥rmula: C(s) = K(s + z)/(s + p), onde z > p",
            "‚Ä¢ N√£o afeta significativamente resposta transit√≥ria",
            "‚Ä¢ Diminui largura de banda"
        ])

    elif method == "pid":
        content.extend([
            "üéì CONTROLADOR PID:",
            "‚Ä¢ Proporcional: Kp - reduz erro, pode causar instabilidade",
            "‚Ä¢ Integral: Ki - elimina erro em regime, pode causar overshoot",
            "‚Ä¢ Derivativo: Kd - melhora estabilidade, sens√≠vel a ru√≠do",
            "‚Ä¢ F√≥rmula: C(s) = Kp + Ki/s + Kd*s"
        ])

    elif method == "pole_placement":
        content.extend([
            "üéì ALOCA√á√ÉO DE POLOS:",
            "‚Ä¢ Posiciona polos em locais desejados do plano s",
            "‚Ä¢ Requer sistema completamente control√°vel",
            "‚Ä¢ F√≥rmula de Ackermann: K = [0...0 1] * Wc^(-1) * Œ±c(A)",
            "‚Ä¢ Permite controle direto da resposta transit√≥ria"
        ])

    elif method == "lqr":
        content.extend([
            "üéì REGULADOR LINEAR QUADR√ÅTICO (LQR):",
            "‚Ä¢ Minimiza fun√ß√£o custo quadr√°tica J = ‚à´(x'Qx + u'Ru)dt",
            "‚Ä¢ Solu√ß√£o: K = R^(-1) * B' * P",
            "‚Ä¢ P √© solu√ß√£o da Equa√ß√£o Alg√©brica de Riccati",
            "‚Ä¢ Garante margem de fase de pelo menos 60¬∞"
        ])

    return content

def format_design_steps(steps: List[str]) -> str:
    """
    Formata os passos de projeto de forma pedag√≥gica

    Args:
        steps: Lista de passos do projeto

    Returns:
        str: Passos formatados
    """
    if not steps:
        return ""

    formatted = []
    formatted.append("üìã PASSOS DO PROJETO:")
    formatted.append("=" * 40)

    for i, step in enumerate(steps, 1):
        formatted.append(f"üìù Passo {i}: {step}")
        formatted.append("-" * 30)

    return "\n".join(formatted)
