#!/usr/bin/env python3
"""
Auditoria segura do M√≥dulo 5 - An√°lise de Estabilidade
Testa apenas importa√ß√µes e estrutura, sem executar an√°lises que podem entrar em loop
"""

import sys
sys.path.insert(0, 'src')

def audit_module5():
    """Auditoria b√°sica sem executar c√≥digo que pode entrar em loop"""
    
    print("üîß AUDITORIA M√ìDULO 5 - AN√ÅLISE DE ESTABILIDADE")
    print("=" * 60)
    
    errors = []
    successes = []
    
    # 1. Teste de importa√ß√µes b√°sicas
    print("1. Testando importa√ß√µes b√°sicas...")
    try:
        import src.controllab.analysis
        successes.append("‚úÖ M√≥dulo analysis importado")
    except Exception as e:
        errors.append(f"‚ùå Erro na importa√ß√£o do m√≥dulo: {e}")
    
    # 2. Teste de classes principais
    print("2. Testando classes principais...")
    try:
        from src.controllab.analysis.stability_analysis import StabilityAnalysisEngine
        from src.controllab.analysis.routh_hurwitz import RouthHurwitzAnalyzer
        from src.controllab.analysis.root_locus import RootLocusAnalyzer  
        successes.append("‚úÖ Classes principais importadas")
    except Exception as e:
        errors.append(f"‚ùå Erro na importa√ß√£o das classes: {e}")
    
    # 3. Teste de fun√ß√µes de conveni√™ncia
    print("3. Testando fun√ß√µes de conveni√™ncia...")
    try:
        from src.controllab.analysis import analyze_stability, quick_stability_check
        successes.append("‚úÖ Fun√ß√µes de conveni√™ncia importadas")
    except Exception as e:
        errors.append(f"‚ùå Erro na importa√ß√£o das fun√ß√µes: {e}")
    
    # 4. Verifica√ß√£o de m√©todos sem execu√ß√£o
    print("4. Verificando m√©todos dispon√≠veis...")
    try:
        from src.controllab.analysis.routh_hurwitz import RouthHurwitzAnalyzer
        analyzer = RouthHurwitzAnalyzer()
        
        # Verificar se m√©todos existem (sem executar)
        methods = ['build_routh_table', 'analyze_polynomial', 'get_stability_info']
        existing_methods = [method for method in methods if hasattr(analyzer, method)]
        
        successes.append(f"‚úÖ M√©todos encontrados: {existing_methods}")
    except Exception as e:
        errors.append(f"‚ùå Erro na verifica√ß√£o dos m√©todos: {e}")
    
    # 5. Verifica√ß√£o de depend√™ncias
    print("5. Verificando depend√™ncias...")
    try:
        import sympy as sp
        import numpy as np
        successes.append("‚úÖ Depend√™ncias cr√≠ticas (SymPy, NumPy) dispon√≠veis")
    except Exception as e:
        errors.append(f"‚ùå Erro nas depend√™ncias: {e}")
    
    # Resumo da auditoria
    print("\n" + "=" * 60)
    print("üìä RESUMO DA AUDITORIA:")
    print(f"‚úÖ Sucessos: {len(successes)}")
    print(f"‚ùå Erros: {len(errors)}")
    
    for success in successes:
        print(f"  {success}")
    
    if errors:
        print("\nüî¥ PROBLEMAS ENCONTRADOS:")
        for error in errors:
            print(f"  {error}")
        print("\nüõ†Ô∏è  A√á√ÉO NECESS√ÅRIA: Corrigir problemas antes de usar o m√≥dulo")
        return False
    else:
        print("\nüéâ M√ìDULO 5 PASSOU NA AUDITORIA!")
        print("‚úÖ Status: Pronto para testes funcionais")
        return True

if __name__ == "__main__":
    audit_module5()
