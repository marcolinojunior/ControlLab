"""
Teste de Integra√ß√£o do M√≥dulo 5 - An√°lise de Estabilidade
=========================================================

Este script testa todos os componentes do M√≥dulo 5 de an√°lise de estabilidade,
verificando se funcionam corretamente e se integram entre si.
"""

import sys
import os

# Adicionar o caminho do projeto
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.insert(0, project_root)

import sympy as sp
from sympy import symbols, simplify, expand

def test_routh_hurwitz():
    """Testa o analisador de Routh-Hurwitz"""
    print("üî¢ TESTE: Analisador de Routh-Hurwitz")
    print("-" * 40)
    
    try:
        from src.controllab.analysis.routh_hurwitz import RouthHurwitzAnalyzer
        
        # Criar analisador
        analyzer = RouthHurwitzAnalyzer()
        
        # Teste 1: Sistema est√°vel de 3¬™ ordem
        s = symbols('s')
        poly_stable = s**3 + 2*s**2 + 3*s + 1
        
        print("Testando polin√¥mio est√°vel:", poly_stable)
        routh_array = analyzer.build_routh_array(poly_stable, show_steps=True)
        result = analyzer.analyze_stability(routh_array, show_steps=True)
        
        print(f"Resultado: {'EST√ÅVEL' if result.is_stable else 'INST√ÅVEL'}")
        print(f"Polos inst√°veis: {result.unstable_poles_count}")
        
        # Teste 2: Sistema inst√°vel
        poly_unstable = s**3 - s**2 + 2*s + 1
        print(f"\nTestando polin√¥mio inst√°vel: {poly_unstable}")
        routh_array_2 = analyzer.build_routh_array(poly_unstable, show_steps=False)
        result_2 = analyzer.analyze_stability(routh_array_2, show_steps=False)
        
        print(f"Resultado: {'EST√ÅVEL' if result_2.is_stable else 'INST√ÅVEL'}")
        print(f"Polos inst√°veis: {result_2.unstable_poles_count}")
        
        print("‚úÖ ROUTH-HURWITZ: FUNCIONANDO CORRETAMENTE\n")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO no Routh-Hurwitz: {e}\n")
        return False

def test_root_locus():
    """Testa o analisador de Root Locus"""
    print("üìç TESTE: Analisador de Root Locus")
    print("-" * 35)
    
    try:
        from src.controllab.analysis.root_locus import RootLocusAnalyzer
        
        # Criar analisador
        analyzer = RootLocusAnalyzer()
        
        # Sistema de teste: G(s)H(s) = K/[(s+1)(s+2)(s+3)]
        s = symbols('s')
        system = 1 / ((s + 1) * (s + 2) * (s + 3))
        
        print("Testando sistema:", system)
        result = analyzer.analyze_comprehensive(system, show_steps=True)
        
        print(f"N√∫mero de polos: {len(result.poles)}")
        print(f"N√∫mero de zeros: {len(result.zeros)}")
        print(f"N√∫mero de branches: {result.num_branches}")
        
        if hasattr(result, 'centroid'):
            print(f"Centr√≥ide: {result.centroid}")
        
        print("‚úÖ ROOT LOCUS: FUNCIONANDO CORRETAMENTE\n")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO no Root Locus: {e}\n")
        return False

def test_frequency_response():
    """Testa o analisador de resposta em frequ√™ncia"""
    print("üìà TESTE: Analisador de Resposta em Frequ√™ncia")
    print("-" * 45)
    
    try:
        from src.controllab.analysis.frequency_response import FrequencyAnalyzer
        
        # Criar analisador
        analyzer = FrequencyAnalyzer()
        
        # Sistema de teste: G(s) = 1/(s+1)
        s = symbols('s')
        system = 1 / (s + 1)
        
        print("Testando sistema:", system)
        result = analyzer.calculate_gain_phase_margins(system, show_steps=True)
        
        print(f"Margem de ganho: {result.gain_margin_db:.2f} dB")
        print(f"Margem de fase: {result.phase_margin:.2f}¬∞")
        print(f"Sistema est√°vel: {'SIM' if result.is_stable else 'N√ÉO'}")
        
        print("‚úÖ FREQUENCY RESPONSE: FUNCIONANDO CORRETAMENTE\n")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO no Frequency Response: {e}\n")
        return False

def test_stability_utils():
    """Testa os utilit√°rios de estabilidade"""
    print("üîß TESTE: Utilit√°rios de Estabilidade")
    print("-" * 35)
    
    try:
        from src.controllab.analysis.stability_utils import StabilityValidator
        
        # Criar validador
        validator = StabilityValidator()
        
        # Sistema de teste
        s = symbols('s')
        system = 1 / (s**2 + 2*s + 1)
        
        print("Testando sistema:", system)
        results = validator.validate_stability_methods(system, show_steps=True)
        
        print("M√©todos testados:")
        for method, result in results.items():
            if isinstance(result, dict) and 'is_stable' in result:
                status = "EST√ÅVEL" if result['is_stable'] else "INST√ÅVEL"
                print(f"  {method}: {status}")
        
        # Mostrar relat√≥rio de valida√ß√£o
        print("\nRelat√≥rio de valida√ß√£o:")
        print(validator.history.get_formatted_report())
        
        print("‚úÖ STABILITY UTILS: FUNCIONANDO CORRETAMENTE\n")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO nos Stability Utils: {e}\n")
        return False

def test_stability_analysis():
    """Testa o motor principal de an√°lise"""
    print("üéØ TESTE: Motor Principal de An√°lise")
    print("-" * 35)
    
    try:
        from src.controllab.analysis.stability_analysis import StabilityAnalysisEngine
        
        # Criar motor de an√°lise
        engine = StabilityAnalysisEngine()
        
        # Sistema de teste: fun√ß√£o de transfer√™ncia de 2¬™ ordem
        s = symbols('s')
        system = (s + 1) / (s**2 + 3*s + 2)
        
        print("Testando sistema:", system)
        
        # An√°lise r√°pida
        quick_result = engine.quick_stability_check(system)
        print(f"Verifica√ß√£o r√°pida: {'EST√ÅVEL' if quick_result['is_stable'] else 'INST√ÅVEL'}")
        print(f"M√©todo usado: {quick_result['method_used']}")
        
        # An√°lise completa
        print("\nRealizada an√°lise completa...")
        comprehensive_result = engine.comprehensive_analysis(system, show_all_steps=False)
        
        # Mostrar resumo executivo
        print("\n" + comprehensive_result.get_executive_summary())
        
        print("‚úÖ STABILITY ANALYSIS: FUNCIONANDO CORRETAMENTE\n")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO no Stability Analysis: {e}\n")
        return False

def test_integration():
    """Testa a integra√ß√£o completa do m√≥dulo"""
    print("üîó TESTE: Integra√ß√£o Completa do M√≥dulo 5")
    print("-" * 45)
    
    try:
        # Tentar importar via __init__.py
        from src.controllab.analysis import analyze_stability
        
        # Sistema de teste
        s = symbols('s')
        system = 2 / (s**3 + 4*s**2 + 5*s + 2)
        
        print("Testando sistema via interface integrada:", system)
        
        # An√°lise completa via fun√ß√£o de conveni√™ncia
        result = analyze_stability(system, show_steps=False)
        
        # Mostrar relat√≥rio final
        print(result.get_full_report())
        
        print("‚úÖ INTEGRA√á√ÉO: FUNCIONANDO CORRETAMENTE\n")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO na Integra√ß√£o: {e}\n")
        return False

def main():
    """Executa todos os testes do M√≥dulo 5"""
    print("üß™ TESTES DO M√ìDULO 5 - AN√ÅLISE DE ESTABILIDADE")
    print("=" * 60)
    print()
    
    # Contador de sucessos
    tests_passed = 0
    total_tests = 6
    
    # Executar testes individuais
    if test_routh_hurwitz():
        tests_passed += 1
    
    if test_root_locus():
        tests_passed += 1
    
    if test_frequency_response():
        tests_passed += 1
    
    if test_stability_utils():
        tests_passed += 1
    
    if test_stability_analysis():
        tests_passed += 1
    
    if test_integration():
        tests_passed += 1
    
    # Relat√≥rio final
    print("üìã RELAT√ìRIO FINAL DOS TESTES")
    print("=" * 35)
    print(f"Testes executados: {total_tests}")
    print(f"Testes aprovados: {tests_passed}")
    print(f"Taxa de sucesso: {(tests_passed/total_tests)*100:.1f}%")
    
    if tests_passed == total_tests:
        print("\nüéâ M√ìDULO 5 IMPLEMENTADO COM SUCESSO!")
        print("‚úÖ Todos os componentes funcionando corretamente")
        print("‚úÖ Integra√ß√£o entre m√≥dulos validada")
        print("‚úÖ Interface pedag√≥gica operacional")
    else:
        print(f"\n‚ö†Ô∏è  ALGUNS PROBLEMAS ENCONTRADOS")
        print(f"‚ùå {total_tests - tests_passed} teste(s) falharam")
        print("üîß Verificar erros acima para corre√ß√µes necess√°rias")

if __name__ == "__main__":
    main()
