"""
Teste Completo do M√≥dulo 6 - Projeto de Controladores
====================================================

Teste das funcionalidades implementadas:
- specifications.py: Sistema de especifica√ß√µes de performance
- visualization.py: Visualiza√ß√µes educacionais  
- comparison.py: Compara√ß√£o de m√©todos
- antiwindup.py: Compensa√ß√£o anti-windup
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from controllab.core.symbolic_tf import SymbolicTransferFunction
from controllab.design.specifications import PerformanceSpec, verify_specifications, pole_placement_from_specs
from controllab.design.comparison import compare_controller_designs, pareto_analysis

from controllab.design.antiwindup import design_antiwindup_compensation, SaturationLimits
from controllab.analysis.stability_analysis import analyze_stability

import sympy as sp

def test_module6_complete():
    """Teste completo do m√≥dulo 6"""
    print("üéØ TESTE COMPLETO M√ìDULO 6 - PROJETO DE CONTROLADORES")
    print("=" * 70)
    
    # 1. Definir sistema de teste
    s = sp.Symbol('s')
    plant = SymbolicTransferFunction(1 / (s**2 + 2*s + 1), s)
    print(f"üè≠ Planta de teste: G(s) = {plant}")
    
    # 2. Teste das especifica√ß√µes
    print(f"\nüìã TESTE 1: ESPECIFICA√á√ïES DE PERFORMANCE")
    print("-" * 50)
    
    specs = PerformanceSpec(
        overshoot=20.0,
        settling_time=5.0,
        steady_state_error=0.02,
        bandwidth=2.0,
        phase_margin=45.0
    )
    print(f"‚úÖ Especifica√ß√µes criadas: {specs}")
    
    # 3. Teste de controladores diferentes
    print(f"\nüéõÔ∏è TESTE 2: DESIGN DE CONTROLADORES")
    print("-" * 50)
    
    # Controlador P
    Kp = 10
    controller_P = SymbolicTransferFunction(Kp, s)
    print(f"   P: C_P(s) = {controller_P}")
    
    # Controlador PI  
    Kp, Ki = 5, 2
    controller_PI = SymbolicTransferFunction(Kp + Ki/s, s)
    print(f"   PI: C_PI(s) = {controller_PI}")
    
    # Controlador PID
    Kp, Ki, Kd = 8, 4, 1
    controller_PID = SymbolicTransferFunction(Kp + Ki/s + Kd*s, s)
    print(f"   PID: C_PID(s) = {controller_PID}")
    
    controllers = [controller_P, controller_PI, controller_PID]
    
    # 4. Teste de compara√ß√£o
    print(f"\n‚öñÔ∏è TESTE 3: COMPARA√á√ÉO DE CONTROLADORES")
    print("-" * 50)
    
    try:
        comparison_result = compare_controller_designs(
            plant=plant,
            controllers=controllers, 
            specifications=specs,
            criteria=['stability', 'performance', 'complexity']
        )
        print("‚úÖ Compara√ß√£o conclu√≠da com sucesso!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na compara√ß√£o: {e}")
    
    # 5. Teste de anti-windup
    print(f"\nüîß TESTE 4: COMPENSA√á√ÉO ANTI-WINDUP")
    print("-" * 50)
    
    # Usar controlador PI que tem a√ß√£o integral
    saturation = SaturationLimits(u_min=-10.0, u_max=10.0)
    
    try:
        antiwindup_result = design_antiwindup_compensation(
            controller=controller_PI,
            plant=plant,
            saturation_limits=saturation,
            method='back_calculation'
        )
        print("‚úÖ Anti-windup implementado com sucesso!")
        print(f"   Original: {antiwindup_result.original_controller}")
        print(f"   Com AW: {antiwindup_result.antiwindup_controller}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no anti-windup: {e}")
    
    # 6. Teste de verifica√ß√£o de especifica√ß√µes
    print(f"\nüìä TESTE 5: VERIFICA√á√ÉO DE ESPECIFICA√á√ïES")
    print("-" * 50)
    
    # Sistema em malha fechada com controlador PI
    try:
        closed_loop = (controller_PI * plant) / (1 + controller_PI * plant)
        closed_loop = closed_loop.simplify()
        print(f"   Sistema MF: T(s) = {closed_loop}")
        
        verification = verify_specifications(closed_loop, specs)
        print(f"   Verifica√ß√£o: {verification}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na verifica√ß√£o: {e}")
    

    # 6b. An√°lise pedag√≥gica de estabilidade
    print(f"\nüìñ AN√ÅLISE PEDAG√ìGICA DE ESTABILIDADE")
    print("-" * 50)
    try:
        stability_report = analyze_stability(closed_loop, show_steps=True)
        print(stability_report.get_executive_summary())
        print(stability_report.get_detailed_analysis())
        print(stability_report.get_educational_section())
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na an√°lise pedag√≥gica: {e}")

    # 7. Teste de posicionamento de polos a partir de specs
    print(f"\nüéØ TESTE 6: POSICIONAMENTO DE POLOS")
    print("-" * 50)
    
    try:
        desired_poles = pole_placement_from_specs(specs)
        print(f"   Polos desejados: {desired_poles}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no posicionamento: {e}")
    
    print(f"\n‚úÖ TESTE M√ìDULO 6 CONCLU√çDO!")
    print("=" * 70)
    return True

if __name__ == "__main__":
    test_module6_complete()
