"""
Teste de Integra√ß√£o entre M√≥dulos - Verifica√ß√£o Anti-Caixa Preta
================================================================

Este teste verifica se os m√≥dulos realmente se comunicam de forma
transparente e pedag√≥gica, sem comportamentos de "caixa preta".
"""

import sympy as sp
from sympy import symbols, I, pi
import sys


def test_integration():
    """Testa integra√ß√£o completa entre m√≥dulos"""
    
    print("üîó TESTE DE INTEGRA√á√ÉO INTER-M√ìDULOS")
    print("=" * 50)
    
    # Sistema de teste
    s = symbols('s')
    system = 1 / (s**2 + 2*s + 1)  # Sistema est√°vel conhecido
    
    print(f"üìä Sistema teste: {system}")
    print()
    
    # 1. Teste Routh-Hurwitz standalone
    print("1Ô∏è‚É£ TESTE ROUTH-HURWITZ:")
    try:
        from src.controllab.analysis.routh_hurwitz import RouthHurwitzAnalyzer
        
        routh_analyzer = RouthHurwitzAnalyzer()
        poly = s**2 + 2*s + 1
        routh_result = routh_analyzer.build_routh_array(poly, show_steps=True)
        stability = routh_analyzer.analyze_stability(routh_result, show_steps=True)
        
        print(f"   ‚úÖ Estabilidade: {stability.is_stable}")
        print(f"   ‚úÖ Mudan√ßas de sinal: {stability.sign_changes}")
        print(f"   ‚úÖ Passos pedag√≥gicos: {len(stability.history.steps) if stability.history else 0}")
        
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False
    
    # 2. Teste Root Locus standalone
    print("\n2Ô∏è‚É£ TESTE ROOT LOCUS:")
    try:
        from src.controllab.analysis.root_locus import RootLocusAnalyzer
        
        rl_analyzer = RootLocusAnalyzer()
        features = rl_analyzer.get_locus_features(system, show_steps=True)
        
        print(f"   ‚úÖ Polos: {features.poles}")
        print(f"   ‚úÖ Zeros: {features.zeros}")
        print(f"   ‚úÖ N√∫mero de ramos: {features.num_branches}")
        print(f"   ‚úÖ Regras aplicadas: {len(features.analysis_history.rules_applied) if features.analysis_history else 0}")
        
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False
    
    # 3. Teste Frequency Response standalone
    print("\n3Ô∏è‚É£ TESTE FREQUENCY RESPONSE:")
    try:
        from src.controllab.analysis.frequency_response import FrequencyAnalyzer
        
        freq_analyzer = FrequencyAnalyzer()
        margins = freq_analyzer.calculate_gain_phase_margins(system, show_steps=True)
        
        print(f"   ‚úÖ Margem de ganho: {margins.gain_margin_db:.2f} dB")
        print(f"   ‚úÖ Margem de fase: {margins.phase_margin:.2f}¬∞")
        print(f"   ‚úÖ Est√°vel: {margins.is_stable}")
        
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False
    
    # 4. Teste de Integra√ß√£o Completa
    print("\n4Ô∏è‚É£ TESTE INTEGRA√á√ÉO COMPLETA:")
    try:
        from src.controllab.analysis.stability_analysis import StabilityAnalysisEngine
        
        engine = StabilityAnalysisEngine()
        comprehensive_result = engine.comprehensive_analysis(system, show_all_steps=True)
        
        full_report = comprehensive_result.get_full_report()
        
        print(f"   ‚úÖ Relat√≥rio gerado: {len(full_report)} caracteres")
        print(f"   ‚úÖ Cont√©m 'Routh': {'Routh' in full_report}")
        print(f"   ‚úÖ Cont√©m 'Root Locus': {'Root Locus' in full_report or 'lugar' in full_report.lower()}")
        print(f"   ‚úÖ Cont√©m 'Frequency': {'Frequency' in full_report or 'frequ√™ncia' in full_report.lower()}")
        
        # Teste de Valida√ß√£o Cruzada
        print("\n   üìä VALIDA√á√ÉO CRUZADA:")
        validation_report = comprehensive_result.get_cross_validation_report()
        print(f"   ‚úÖ Valida√ß√£o cruzada: {len(validation_report)} caracteres")
        
        agreements = validation_report.count("‚úÖ")
        disagreements = validation_report.count("‚ùå")
        print(f"   ‚úÖ Concord√¢ncias: {agreements}")
        print(f"   ‚ö†Ô∏è Discord√¢ncias: {disagreements}")
        
        if disagreements > 0:
            print("   üîç M√©todos podem ter discrep√¢ncias - isso √© esperado e pedag√≥gico!")
        
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False
    
    # 5. Teste de Transpar√™ncia Pedag√≥gica
    print("\n5Ô∏è‚É£ TESTE TRANSPAR√äNCIA PEDAG√ìGICA:")
    
    # Verificar se cada m√©todo est√° explicando seus passos
    transparency_checks = {
        "Routh explica passos": len(stability.history.steps) > 5 if stability.history else False,
        "Root Locus mostra regras": len(features.analysis_history.rules_applied) >= 6 if features.analysis_history else False,
        "Frequency Response calcula margens": margins.gain_margin_db is not None,
        "Integra√ß√£o cross-valida": agreements > disagreements,
        "Relat√≥rio √© extenso": len(full_report) > 1000
    }
    
    for check, passed in transparency_checks.items():
        status = "‚úÖ" if passed else "‚ùå"
        print(f"   {status} {check}")
    
    all_transparent = all(transparency_checks.values())
    
    # 6. Teste de Comunica√ß√£o entre M√≥dulos
    print("\n6Ô∏è‚É£ TESTE COMUNICA√á√ÉO INTER-M√ìDULOS:")
    
    # Verificar se os resultados s√£o consistentes
    routh_stable = stability.is_stable
    
    # Para Root Locus - sistema est√°vel se polos est√£o no lado esquerdo
    rl_stable = all(p.real < 0 if hasattr(p, 'real') else p < 0 for p in features.poles)
    
    # Para Frequency Response - est√°vel se margens s√£o positivas
    freq_stable = margins.is_stable
    
    consistency_checks = {
        "Routh-Hurwitz": routh_stable,
        "Root Locus": rl_stable, 
        "Frequency Response": freq_stable
    }
    
    print("   üìä Consist√™ncia entre m√©todos:")
    for method, stable in consistency_checks.items():
        print(f"      {method}: {'EST√ÅVEL' if stable else 'INST√ÅVEL'}")
    
    all_agree = len(set(consistency_checks.values())) == 1
    consistency_status = "‚úÖ CONCORDAM" if all_agree else "‚ö†Ô∏è DISCREP√ÇNCIAS"
    print(f"   {consistency_status}")
    
    # Resultado final
    print("\n" + "=" * 50)
    print("üìä RESUMO DA INTEGRA√á√ÉO:")
    print(f"‚úÖ Transpar√™ncia pedag√≥gica: {'SIM' if all_transparent else 'PARCIAL'}")
    print(f"üîó Comunica√ß√£o entre m√≥dulos: {'FUNCIONAL' if all_agree else 'COM DISCREP√ÇNCIAS'}")
    print(f"üìö Hist√≥ricos pedag√≥gicos: DISPON√çVEIS")
    print(f"üéØ Valida√ß√£o cruzada: ATIVA")
    
    integration_success = all_transparent and (all_agree or disagreements <= agreements)
    
    if integration_success:
        print("\nüéâ INTEGRA√á√ÉO COMPLETAMENTE FUNCIONAL!")
        print("‚úÖ N√ÉO √â CAIXA PRETA - Todos os m√©todos s√£o transparentes")
        print("‚úÖ PEDAGOGICAMENTE RICO - Explica√ß√µes detalhadas dispon√≠veis")
        print("‚úÖ M√ìDULOS COMUNICAM - Cross-validation ativa")
    else:
        print("\n‚ö†Ô∏è INTEGRA√á√ÉO PARCIAL")
        print("üîß Algumas melhorias podem ser necess√°rias")
    
    return integration_success


def test_specific_pedagogy():
    """Testa aspectos pedag√≥gicos espec√≠ficos"""
    
    print("\n" + "=" * 50)
    print("üìö TESTE ESPEC√çFICO DE PEDAGOGIA")
    print("=" * 50)
    
    s = symbols('s') 
    system = 1 / (s * (s + 1) * (s + 2))  # Sistema de 3¬™ ordem
    
    try:
        from src.controllab.analysis.stability_analysis import StabilityAnalysisEngine
        
        engine = StabilityAnalysisEngine()
        result = engine.comprehensive_analysis(system, show_all_steps=True)
        
        # Extrair se√ß√µes educacionais
        full_report = result.get_full_report()
        
        pedagogical_features = {
            "Explica√ß√£o conceitual": "conceito" in full_report.lower() or "fundamento" in full_report.lower(),
            "Passos detalhados": "passo" in full_report.lower() or "etapa" in full_report.lower(),
            "F√≥rmulas mostradas": "=" in full_report and ("f√≥rmula" in full_report.lower() or "equa√ß√£o" in full_report.lower()),
            "Conex√µes entre m√©todos": "conex√£o" in full_report.lower() or "relaciona" in full_report.lower(),
            "Interpreta√ß√£o f√≠sica": "f√≠sic" in full_report.lower() or "significa" in full_report.lower(),
            "Casos especiais": "especial" in full_report.lower() or "exce√ß√£o" in full_report.lower(),
        }
        
        print("üìã CARACTER√çSTICAS PEDAG√ìGICAS:")
        pedagogical_score = 0
        for feature, present in pedagogical_features.items():
            status = "‚úÖ" if present else "‚ùå"
            print(f"   {status} {feature}")
            if present:
                pedagogical_score += 1
        
        pedagogy_percentage = (pedagogical_score / len(pedagogical_features)) * 100
        print(f"\nüìä Score pedag√≥gico: {pedagogy_percentage:.1f}%")
        
        if pedagogy_percentage >= 80:
            print("üéì EXCELENTE - Altamente pedag√≥gico")
        elif pedagogy_percentage >= 60:
            print("üìö BOM - Adequadamente pedag√≥gico") 
        else:
            print("‚ö†Ô∏è NECESSITA MELHORIAS - Pedagogia limitada")
        
        return pedagogy_percentage >= 60
        
    except Exception as e:
        print(f"‚ùå Erro no teste pedag√≥gico: {e}")
        return False


def main():
    """Executa todos os testes de integra√ß√£o"""
    
    print("üß™ VALIDA√á√ÉO COMPLETA DE INTEGRA√á√ÉO E PEDAGOGIA")
    print("=" * 60)
    print("Verificando se os m√≥dulos se comunicam sem serem 'caixa preta'...")
    print()
    
    # Teste de integra√ß√£o
    integration_ok = test_integration()
    
    # Teste pedag√≥gico espec√≠fico
    pedagogy_ok = test_specific_pedagogy()
    
    # Resultado final
    print("\n" + "=" * 60)
    print("üèÅ RESULTADO FINAL DA VALIDA√á√ÉO")
    print("=" * 60)
    
    if integration_ok and pedagogy_ok:
        print("üéâ M√ìDULO 5 COMPLETAMENTE APROVADO!")
        print("‚úÖ Integra√ß√£o perfeita entre componentes")
        print("‚úÖ Transpar√™ncia pedag√≥gica verificada")
        print("‚úÖ Comunica√ß√£o inter-m√≥dulos funcional")
        print("‚úÖ Sem comportamento de 'caixa preta'")
        print("\nüí° O usu√°rio pode usar com confian√ßa - todos os [x] funcionam!")
        return True
    else:
        print("‚ö†Ô∏è M√ìDULO 5 PARCIALMENTE APROVADO")
        print(f"   Integra√ß√£o: {'‚úÖ' if integration_ok else '‚ùå'}")
        print(f"   Pedagogia: {'‚úÖ' if pedagogy_ok else '‚ùå'}")
        print("\nüîß Algumas melhorias podem ser necess√°rias")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
