#!/usr/bin/env python3
"""
Teste simples para validar o M√≥dulo 4 - Modelagem Laplace
"""

import sys
import os

# Adicionar src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Ativar ambiente virtual se necess√°rio
try:
    import sympy as sp
    import numpy as np
    print("‚úÖ Depend√™ncias b√°sicas OK")
except ImportError as e:
    print(f"‚ùå Erro nas depend√™ncias: {e}")
    sys.exit(1)

def test_module4_basic():
    """Teste b√°sico do M√≥dulo 4"""
    
    print("\nüîß TESTANDO M√ìDULO 4 - MODELAGEM LAPLACE")
    print("=" * 50)
    
    try:
        # 1. Testar importa√ß√£o do m√≥dulo
        print("1. Testando importa√ß√£o...")
        from controllab.modeling import laplace_transform
        from controllab.modeling import partial_fractions
        from controllab.modeling import conversions
        from controllab.modeling import canonical_forms
        from controllab.modeling import physical_systems
        print("   ‚úÖ Todos os subm√≥dulos importados com sucesso")
        
        # 2. Testar LaplaceTransformer
        print("\n2. Testando LaplaceTransformer...")
        transformer = laplace_transform.LaplaceTransformer()
        
        # Vari√°veis simb√≥licas
        s, t = sp.symbols('s t')
        
        # Teste b√°sico de transformada
        result = laplace_transform.apply_laplace_transform(sp.exp(-t), t, s)
        print(f"   ‚úÖ Transformada de e^(-t): {result}")
        
        # 3. Testar Expans√£o em Fra√ß√µes Parciais
        print("\n3. Testando Expans√£o em Fra√ß√µes Parciais...")
        expander = partial_fractions.PartialFractionExpander()
        
        # Teste com fun√ß√£o simples
        tf_expr = 1 / (s * (s + 1))
        expansion = expander.expand(tf_expr, s)
        print(f"   ‚úÖ Expans√£o de 1/(s(s+1)): {expansion}")
        
        # 4. Testar Convers√µes
        print("\n4. Testando Convers√µes...")
        
        # Criar uma fun√ß√£o de transfer√™ncia simb√≥lica simples
        from controllab.core.symbolic_tf import SymbolicTransferFunction
        tf = SymbolicTransferFunction(1, [1, 1], s)
        
        # Converter para espa√ßo de estados
        ss_result = conversions.tf_to_ss(tf)
        print(f"   ‚úÖ Convers√£o TF‚ÜíSS realizada")
        
        # 5. Testar Formas Can√¥nicas
        print("\n5. Testando Formas Can√¥nicas...")
        
        controllable_form = canonical_forms.controllable_canonical(tf)
        print(f"   ‚úÖ Forma can√¥nica control√°vel gerada")
        
        # 6. Testar Sistemas F√≠sicos
        print("\n6. Testando Sistemas F√≠sicos...")
        
        # Criar sistema massa-mola-amortecedor
        mechanical = physical_systems.MechanicalSystem(mass=1, damping=0.5, stiffness=1)
        mechanical.derive_equations()  # Derivar equa√ß√µes primeiro
        mechanical.apply_laplace_modeling()  # Aplicar Laplace
        tf_mechanical = mechanical.transfer_function
        print(f"   ‚úÖ Sistema mec√¢nico: {tf_mechanical}")
        
        # Criar circuito RLC
        electrical = physical_systems.ElectricalSystem(resistance=1, inductance=1, capacitance=1)
        electrical.derive_equations()  # Derivar equa√ß√µes primeiro
        electrical.apply_laplace_modeling()  # Aplicar Laplace
        tf_electrical = electrical.transfer_function
        print(f"   ‚úÖ Sistema el√©trico: {tf_electrical}")
        
        print("\nüéâ M√ìDULO 4 - TODOS OS TESTES PASSARAM!")
        print("‚úÖ Status: 100% FUNCIONAL")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO no teste: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_module4_basic()
    if success:
        print("\n" + "="*50)
        print("üöÄ M√ìDULO 4 PRONTO PARA USO!")
        print("üìã Pr√≥ximo passo: Implementar M√≥dulo 5 (An√°lise de Estabilidade)")
        sys.exit(0)
    else:
        sys.exit(1)
