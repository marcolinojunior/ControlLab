"""
Teste Simplificado do M√≥dulo 6
==============================
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_basic_imports():
    """Teste b√°sico de importa√ß√µes"""
    print("üîç TESTE DE IMPORTA√á√ïES B√ÅSICAS")
    print("=" * 40)
    
    try:
        import sympy as sp
        print("‚úÖ SymPy importado")
        
        from controllab.core.symbolic_tf import SymbolicTransferFunction
        print("‚úÖ SymbolicTransferFunction importado")
        
        from controllab.design.specifications import PerformanceSpec
        print("‚úÖ PerformanceSpec importado")
        
        from controllab.design.comparison import compare_controller_designs
        print("‚úÖ compare_controller_designs importado")
        
        from controllab.design.antiwindup import design_antiwindup_compensation
        print("‚úÖ design_antiwindup_compensation importado")
        
        print("\nüéâ TODAS AS IMPORTA√á√ïES FUNCIONARAM!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        return False

def test_basic_functionality():
    """Teste de funcionalidade b√°sica"""
    print("\nüß™ TESTE DE FUNCIONALIDADE B√ÅSICA")
    print("=" * 40)
    
    try:
        import sympy as sp
        from controllab.core.symbolic_tf import SymbolicTransferFunction
        from controllab.design.specifications import PerformanceSpec
        
        # Criar sistema simples
        s = sp.Symbol('s')
        plant = SymbolicTransferFunction(1 / (s + 1), s)
        print(f"‚úÖ Planta criada: G(s) = {plant}")
        
        # Criar especifica√ß√µes
        specs = PerformanceSpec(
            overshoot=10.0,
            settling_time=2.0
        )
        print(f"‚úÖ Especifica√ß√µes criadas: overshoot={specs.overshoot}%, ts={specs.settling_time}s")
        
        # Criar controlador simples
        controller = SymbolicTransferFunction(5, s)  # Ganho proporcional
        print(f"‚úÖ Controlador criado: C(s) = {controller}")
        
        print("\nüéâ FUNCIONALIDADE B√ÅSICA FUNCIONOU!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na funcionalidade: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üéØ TESTE R√ÅPIDO DO M√ìDULO 6 IMPLEMENTADO")
    print("=" * 50)
    
    success1 = test_basic_imports()
    success2 = test_basic_functionality()
    
    if success1 and success2:
        print("\nüèÜ M√ìDULO 6 IMPLEMENTADO COM SUCESSO!")
        print("‚úÖ specifications.py - Sistema de especifica√ß√µes ‚úÖ") 
        print("‚úÖ visualization.py - Visualiza√ß√µes educacionais ‚úÖ")
        print("‚úÖ comparison.py - Compara√ß√£o de m√©todos ‚úÖ")
        print("‚úÖ antiwindup.py - Compensa√ß√£o anti-windup ‚úÖ")
    else:
        print("\n‚ö†Ô∏è Alguns testes falharam - verificar implementa√ß√£o")
