"""
Demonstra√ß√£o da Filosofia de "Diagn√≥stico Inteligente"
======================================================

Este script demonstra a filosofia de "Diagn√≥stico Inteligente" do ControlLab,
mostrando como o sistema captura erros e fornece feedback √∫til.
"""

# --- IN√çCIO DO C√ìDIGO DE CORRE√á√ÉO ---
import sys
import os

# Adiciona o diret√≥rio raiz do projeto (um n√≠vel acima de 'examples') ao path do Python
# para que ele possa encontrar a pasta 'src'
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'ControlLab-Project'))
sys.path.insert(0, project_root)
# --- FIM DO C√ìDIGO DE CORRE√á√ÉO ---

import sympy as sp
from src.controllab.core.symbolic_tf import SymbolicTransferFunction
from controllab.design.antiwindup import design_antiwindup_compensation, SaturationLimits

def main():
    print("üéØ DEMONSTRA√á√ÉO DO DIAGN√ìSTICO INTELIGENTE")
    print("=" * 50)

    print("\n--- Demonstra√ß√£o do Diagn√≥stico Inteligente ---")

    try:
        # Criar um controlador PI incorreto, como no nosso teste
        s = sp.Symbol('s')

        # Erro: Controlador n√£o √© estritamente pr√≥prio, o que √© um requisito
        # para o projeto de anti-windup.
        flawed_pi = SymbolicTransferFunction(5 + 2/s, s)
        plant = SymbolicTransferFunction(1, s + 1, s)

        print("\nü§î TENTATIVA DE A√á√ÉO INCORRETA:")
        print(f"   Controlador: {flawed_pi}")
        print(f"   Planta: {plant}")
        print("   A√ß√£o: Projetar compensa√ß√£o anti-windup")

        # Tentar usar uma fun√ß√£o que falhar√° devido ao controlador incorreto
        design_antiwindup_compensation(flawed_pi, plant, SaturationLimits(u_min=-1, u_max=1), 'back_calculation')

    except ValueError as e:
        print("\n‚úÖ Ocorreu um erro, como esperado!")
        print("   O ControlLab forneceu o seguinte relat√≥rio de diagn√≥stico:")
        print("="*50)
        print(e) # Imprime a mensagem de erro rica em contexto
        print("="*50)

        print("\nüîç AN√ÅLISE DO ERRO:")
        print("   - A mensagem de erro √© clara e informativa.")
        print("   - Ela explica por que a opera√ß√£o falhou (controlador n√£o √© estritamente pr√≥prio).")
        print("   - Fornece contexto sobre a verifica√ß√£o que falhou.")
        print("   - Sugere poss√≠veis solu√ß√µes ou pr√≥ximos passos.")

    print("\n" + "=" * 50)
    print("üéâ DIAGN√ìSTICO INTELIGENTE DEMONSTRADO!")

if __name__ == "__main__":
    main()
