# -*- coding: utf-8 -*-

"""
================================================================================
ControlLab - Depura√ß√£o, Simula√ß√£o e Relat√≥rio do Forno Industrial
================================================================================
Este script executa uma depura√ß√£o passo a passo do problema do forno,
imprimindo os resultados de cada fun√ß√£o da biblioteca ControlLab no console
em tempo real. Ao final, gera um relat√≥rio completo em Markdown.

O objetivo √© testar a funcionalidade e a sa√≠da de cada componente da
biblioteca, conforme a documenta√ß√£o, para garantir que tudo funcione como
esperado.
"""

# --- Importa√ß√µes da Biblioteca ControlLab ---
# Importa√ß√µes baseadas estritamente na DOCUMENTACAO_FUNCOES_COMPLETA.md
from controllab.core.symbolic_tf import SymbolicTransferFunction
from controllab.core.symbolic_utils import create_laplace_variable, convert_to_latex_formatted
from controllab.core.history import OperationHistory

from controllab.modeling.conversions import feedback_connection
from controllab.modeling.laplace_transform import LaplaceTransformer

from controllab.analysis.stability_analysis import StabilityAnalysisEngine
from controllab.analysis.routh_hurwitz import RouthHurwitzAnalyzer
from controllab.analysis.root_locus import RootLocusAnalyzer

from controllab.design.compensators import PID
from controllab.design.design_utils import DesignSpecifications
from controllab.design.specifications import verify_specifications

from controllab.numerical.interface import NumericalInterface

# Bibliotecas padr√£o
import matplotlib.pyplot as plt
import numpy as np
import sympy as sp

# --- Classe para Gera√ß√£o do Relat√≥rio Final ---
class ReportGenerator:
    def __init__(self, title):
        self.title = title
        self.sections = []

    def add_section(self, title, content):
        self.sections.append({"title": title, "content": content})

    def write_to_file(self, filename="relatorio_final.md"):
        full_content = f"# ‚úÖ {self.title}\n"
        full_content += "*Gerado utilizando as funcionalidades de relat√≥rio da biblioteca ControlLab*\n\n---\n\n"

        for section in self.sections:
            full_content += f"## üîπ {section['title']}\n"
            full_content += f"{section['content']}\n\n---\n\n"

        try:
            with open(filename, "w", encoding="utf-8") as f:
                f.write(full_content)
            print(f"\n‚úÖ Relat√≥rio '{filename}' gerado com sucesso!")
        except Exception as e:
            print(f"\n‚ùå Erro ao salvar o relat√≥rio: {e}")

# --- Fun√ß√£o Principal de Execu√ß√£o ---
def main():
    report = ReportGenerator("Relat√≥rio Pedag√≥gico do Problema do Forno Industrial")

    # ==========================================================================
    # 1. & 2. Modelagem do Sistema e Transformada de Laplace
    # ==========================================================================
    print("\n--- ‚öôÔ∏è  ETAPA 1 & 2: Modelagem e Transformada de Laplace ---")
    s = create_laplace_variable('s')
    K, tau = 5.0, 100.0
    planta_tf = SymbolicTransferFunction(K, tau * s + 1, s)
    print(f"‚úÖ Fun√ß√£o de Transfer√™ncia da Planta G(s): {planta_tf}")

    report.add_section(
        "Modelagem do Sistema e Fun√ß√£o de Transfer√™ncia",
        f"**Justificativa:** Representar o sistema f√≠sico por um modelo matem√°tico para an√°lise.\n\n"
        f"**Resultado (G(s)):**\n```latex\n{sp.latex(planta_tf.numerator / planta_tf.denominator)}\n```"
    )

    # ==========================================================================
    # 3. & 4. An√°lise da Resposta ao Degrau da Planta e Justificativa
    # ==========================================================================
    print("\n--- üìâ ETAPA 3 & 4: An√°lise da Planta e Justificativa do Controle ---")
    ts_planta = 4 * tau
    print(f"An√°lise da planta em malha aberta:")
    print(f"  - Tempo de acomoda√ß√£o (ts) ‚âà 4 * œÑ = {ts_planta:.1f} segundos.")
    print(f"  - Conclus√£o: Sistema muito lento (ts > 300s). √â necess√°rio um controlador.")

    report.add_section(
        "An√°lise da Planta e Justificativa do Controle",
        f"**Justificativa:** Analisar a resposta do sistema sem controle para verificar a necessidade de compensa√ß√£o.\n\n"
        f"**Resultado:**\n- Tempo de Acomoda√ß√£o (ts): **{ts_planta:.1f} segundos**\n"
        f"- Conclus√£o: O sistema n√£o atende √† especifica√ß√£o de tempo de acomoda√ß√£o. **Um controlador √© essencial.**"
    )

    # ==========================================================================
    # 5. Projeto do Controlador PI
    # ==========================================================================
    print("\n--- üõ†Ô∏è  ETAPA 5: Projeto do Controlador PI ---")
    Kp, Ti = 10.0, 20.0
    controlador_pi = PID(Kp, Ki=Kp/Ti, Kd=0.0, variable='s').simplify()
    print(f"‚úÖ Controlador PI Projetado C(s): {controlador_pi}")

    report.add_section(
        "Projeto do Controlador PI",
        f"**Justificativa:** Um controlador PI √© usado para zerar o erro em regime permanente e melhorar a velocidade da resposta.\n\n"
        f"**Resultado (C(s)):**\n```latex\n{sp.latex(controlador_pi.numerator / controlador_pi.denominator)}\n```"
    )

    # ==========================================================================
    # 6. LGR (Lugar das Ra√≠zes)
    # ==========================================================================
    print("\n--- üìà ETAPA 6: An√°lise via Lugar Geom√©trico das Ra√≠zes (LGR) ---")
    malha_aberta_tf = (controlador_pi * planta_tf).simplify()
    print(f"Fun√ß√£o de Malha Aberta para LGR, L(s) = C(s)G(s): {malha_aberta_tf}")

    lgr_analyzer = RootLocusAnalyzer()
    lgr_features = lgr_analyzer.get_locus_features(malha_aberta_tf, show_steps=False)
    print("Caracter√≠sticas do LGR extra√≠das com sucesso:")
    print(f"  - Polos de Malha Aberta: {lgr_features.poles}")
    print(f"  - Zeros de Malha Aberta: {lgr_features.zeros}")
    print(f"  - √Çngulos das Ass√≠ntotas: {lgr_features.asymptotes['angles']}")
    print(f"  - Centroide das Ass√≠ntotas: {lgr_features.asymptotes['centroid']:.3f}")

    report.add_section(
        "An√°lise via Lugar Geom√©trico das Ra√≠zes (LGR)",
        f"**Justificativa:** Analisar como os polos da malha fechada se movem com a varia√ß√£o do ganho para avaliar a estabilidade relativa e o desempenho transit√≥rio.\n\n"
        f"**Resultado da An√°lise do LGR (para L(s)):**\n"
        f"- Polos de Malha Aberta: `{lgr_features.poles}`\n"
        f"- Zeros de Malha Aberta: `{lgr_features.zeros}`\n"
        f"- Ass√≠ntotas: √Çngulos `{lgr_features.asymptotes['angles']}` rad, Centroide em `{lgr_features.asymptotes['centroid']:.3f}`"
    )

    # ==========================================================================
    # 7. An√°lise de Estabilidade (Crit√©rio de Routh-Hurwitz)
    # ==========================================================================
    print("\n--- üõ°Ô∏è  ETAPA 7: An√°lise de Estabilidade (Routh-Hurwitz) ---")
    malha_fechada_tf = (malha_aberta_tf / (1 + malha_aberta_tf)).simplify()
    print(f"Fun√ß√£o de Malha Fechada H(s): {malha_fechada_tf}")

    stability_engine = StabilityAnalysisEngine()
    stability_report_obj = stability_engine.comprehensive_analysis(malha_fechada_tf, show_all_steps=True)

    print("Resultado da An√°lise de Estabilidade (extra√≠do do objeto de relat√≥rio):")
    # Imprimindo o relat√≥rio detalhado diretamente no console
    print(stability_report_obj.get_detailed_analysis())

    report.add_section(
        "An√°lise de Estabilidade (Routh-Hurwitz)",
        f"**Justificativa:** Garantir matematicamente que o sistema em malha fechada √© est√°vel para os ganhos escolhidos.\n\n"
        f"**Relat√≥rio Detalhado Gerado pela Biblioteca:**\n```text\n{stability_report_obj.get_detailed_analysis()}\n```"
    )

    # ==========================================================================
    # 8. Erro em Regime Permanente
    # ==========================================================================
    print("\n--- üéØ ETAPA 8: An√°lise do Erro em Regime Permanente ---")
    print("An√°lise te√≥rica:")
    print("  - O controlador PI introduz um polo na origem (integrador), aumentando o tipo do sistema para 1.")
    print("  - Para um sistema do Tipo 1, o erro em regime permanente para uma entrada degrau √© teoricamente NULO.")

    report.add_section(
        "An√°lise do Erro em Regime Permanente",
        f"**Justificativa:** Verificar se o requisito de erro nulo √© atendido.\n\n"
        f"**An√°lise Te√≥rica:**\n- O controlador PI aumenta o tipo do sistema para **Tipo 1**.\n"
        f"- Para uma entrada degrau, um sistema do Tipo 1 tem um erro em regime permanente **nulo** ($e_{{ss}} = 0$)."
    )

    # ==========================================================================
    # 9. Simula√ß√£o Num√©rica
    # ==========================================================================
    print("\n--- üñ•Ô∏è  ETAPA 9: Simula√ß√£o Num√©rica e Valida√ß√£o Final ---")
    num_interface = NumericalInterface()
    s_var = malha_fechada_tf.variable
    num_eval = malha_fechada_tf.numerator.evalf()
    den_eval = malha_fechada_tf.denominator.evalf()
    tf_for_conversion = SymbolicTransferFunction(num_eval, den_eval, s_var)
    numeric_sys = num_interface.symbolic_to_control_tf(tf_for_conversion)
    t_sim = np.linspace(0, 400, 2000)

    print("Executando a simula√ß√£o num√©rica da resposta ao degrau...")
    time, output = num_interface.compute_step_response(numeric_sys, time_vector=t_sim)
    print("‚úÖ Simula√ß√£o conclu√≠da.")

    specs = DesignSpecifications(overshoot=5.0, settling_time=300.0)
    verification_result = verify_specifications(
        closed_loop_response=(time, output),
        specifications=specs,
    )

    print("Resultados da verifica√ß√£o de desempenho:")
    print(f"  - Sobressinal: {verification_result['metrics']['overshoot']:.2f}% (Requisito: < {specs.overshoot}%)")
    print(f"  - Tempo de Acomoda√ß√£o: {verification_result['metrics']['settling_time']:.2f}s (Requisito: < {specs.settling_time}s)")

    if verification_result['all_specs_met']:
        print("‚úÖ SUCESSO! O sistema controlado atende a todas as especifica√ß√µes de desempenho.")
    else:
        print("‚ùå ATEN√á√ÉO: O sistema controlado N√ÉO atende a todas as especifica√ß√µes.")

    # Gerar o gr√°fico
    plt.figure(figsize=(14, 8))
    plt.plot(time, output, label='Resposta do Forno com Controlador PI', color='deepskyblue', linewidth=2.5)
    plt.axhline(y=1.0, color='black', linestyle='--', label='Refer√™ncia (Setpoint)')
    plt.axhline(y=1.0 + specs.overshoot/100, color='red', linestyle=':', label=f'Limite de Sobressinal ({specs.overshoot}%)')
    plt.axvline(x=specs.settling_time, color='darkorange', linestyle='--', label=f'Limite de Tempo de Acomoda√ß√£o ({specs.settling_time}s)')
    plt.title('Simula√ß√£o da Resposta ao Degrau do Sistema Controlado', fontsize=16, fontweight='bold')
    plt.xlabel('Tempo (segundos)', fontsize=12)
    plt.ylabel('Temperatura Normalizada', fontsize=12)
    plt.grid(True, which='both', linestyle='--')
    plt.legend()
    plt.savefig("simulacao_forno.png")
    print("\nGr√°fico da simula√ß√£o salvo como 'simulacao_forno.png'")

    report.add_section(
        "Simula√ß√£o Num√©rica e Valida√ß√£o Final",
        f"**Justificativa:** Validar o projeto do controlador atrav√©s da simula√ß√£o da resposta temporal e verificar se as m√©tricas de desempenho atendem aos requisitos.\n\n"
        f"**Resultados da Simula√ß√£o:**\n"
        f"- Sobressinal Obtido: **{verification_result['metrics']['overshoot']:.2f}%**\n"
        f"- Tempo de Acomoda√ß√£o Obtido: **{verification_result['metrics']['settling_time']:.2f}s**\n\n"
        f"**Conclus√£o Final:** {'O controlador projetado **atende** a todas as especifica√ß√µes.' if verification_result['all_specs_met'] else 'O controlador projetado **n√£o atende** a todas as especifica√ß√µes.'}\n\n"
        f"![Gr√°fico da Simula√ß√£o](simulacao_forno.png)"
    )

    # --- Gera√ß√£o do Relat√≥rio Final ---
    report.write_to_file()

if __name__ == '__main__':
    main()
